{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/BlotterText.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextContainer = styled.div`\n  width: 100%;\n  height: ${props => props.$isHeader ? '100vh' : 'auto'};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  canvas {\n    width: 100% !important;\n    height: ${props => props.$isHeader ? '100vh' : 'auto'} !important;\n    object-fit: contain;\n  }\n`;\n_c = TextContainer;\nconst FallbackText = styled.div`\n  width: 100%;\n  height: ${props => props.$isHeader ? '100vh' : 'auto'};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: 'Creepster', cursive;\n  font-size: ${props => props.$isHeader ? '4rem' : '2rem'};\n  color: ${props => props.color || '#fff'};\n`;\n_c2 = FallbackText;\nconst vertexShader = `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\nconst fragmentShader = `\n  uniform float time;\n  uniform float distortionFactor;\n  uniform vec2 mousePos;\n  uniform vec3 color;\n  uniform sampler2D textTexture;\n  varying vec2 vUv;\n\n  void main() {\n    vec2 uv = vUv;\n    \n    // Calculate distance from mouse with larger radius of influence\n    float dist = distance(mousePos, uv);\n    float influence = smoothstep(0.8, 0.0, dist) * distortionFactor;\n    \n    // Create wave effect with increased amplitude\n    float wave = sin(uv.x * 8.0 + time) * 0.08 * influence;\n    uv.y += wave;\n    \n    // Create liquid-like distortion with smoother movement\n    float distortion = sin(uv.x * 4.0 + time * 1.5) * cos(uv.y * 4.0 + time) * influence;\n    uv += distortion * 0.08;\n\n    // Sample the text texture with clamping\n    vec2 clampedUv = clamp(uv, 0.0, 1.0);\n    vec4 texColor = texture2D(textTexture, clampedUv);\n    \n    // Mix the text color with our desired color\n    gl_FragColor = vec4(color, texColor.r);\n  }\n`;\n\n// Static WebGL context checker\nconst webGLAvailable = (() => {\n  try {\n    const canvas = document.createElement('canvas');\n    return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\n  } catch (e) {\n    return false;\n  }\n})();\nexport const BlotterText = ({\n  text,\n  size = 100,\n  fill = '#fff',\n  className,\n  isHeader = false\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const rendererRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const materialRef = useRef(null);\n  const mousePos = useRef({\n    x: 0.5,\n    y: 0.5\n  });\n  const frameRef = useRef();\n  const [hasError, setHasError] = useState(!webGLAvailable);\n  useEffect(() => {\n    if (!containerRef.current || hasError) return;\n    try {\n      // Cleanup previous instance if it exists\n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n        rendererRef.current = null;\n      }\n\n      // Setup Three.js scene\n      const scene = new THREE.Scene();\n      sceneRef.current = scene;\n\n      // Setup camera\n      const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 10);\n      camera.position.z = 1;\n      cameraRef.current = camera;\n\n      // Setup renderer with error handling\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true,\n        powerPreference: 'default',\n        preserveDrawingBuffer: true\n      });\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n      renderer.setSize(containerRef.current.clientWidth, containerRef.current.clientHeight);\n      rendererRef.current = renderer;\n\n      // Clear container\n      while (containerRef.current.firstChild) {\n        containerRef.current.removeChild(containerRef.current.firstChild);\n      }\n      containerRef.current.appendChild(renderer.domElement);\n\n      // Create text texture\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d', {\n        alpha: true\n      });\n      if (!ctx) {\n        setHasError(true);\n        return;\n      }\n\n      // Set canvas size based on container size\n      const containerWidth = containerRef.current.clientWidth;\n      const containerHeight = isHeader ? window.innerHeight : containerRef.current.clientHeight;\n      const containerAspect = containerWidth / containerHeight;\n\n      // Use power-of-two dimensions for textures\n      const textureWidth = Math.pow(2, Math.ceil(Math.log2(Math.min(2048, containerWidth))));\n      const textureHeight = Math.pow(2, Math.ceil(Math.log2(textureWidth / containerAspect)));\n      canvas.width = textureWidth;\n      canvas.height = textureHeight;\n\n      // Clear canvas with transparency\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Calculate and set font size\n      const fontSize = isHeader ? Math.floor(canvas.height * 0.25) : Math.floor(canvas.height * 0.8);\n      ctx.font = `bold ${fontSize}px Creepster`;\n      ctx.fillStyle = '#ffffff';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n\n      // Measure and scale text if needed\n      const textMetrics = ctx.measureText(text);\n      const textWidth = textMetrics.width;\n      const maxWidth = canvas.width * 0.9;\n      if (textWidth > maxWidth) {\n        const scale = maxWidth / textWidth;\n        ctx.font = `bold ${Math.floor(fontSize * scale)}px Creepster`;\n      }\n\n      // Draw text\n      ctx.fillText(text, canvas.width / 2, canvas.height / 2);\n\n      // Create texture with proper settings\n      const texture = new THREE.CanvasTexture(canvas);\n      texture.needsUpdate = true;\n      texture.minFilter = THREE.LinearFilter;\n      texture.magFilter = THREE.LinearFilter;\n      texture.format = THREE.RedFormat;\n      texture.generateMipmaps = false;\n\n      // Parse color properly\n      const color = new THREE.Color();\n      color.setStyle(fill.split(',')[0] || fill); // Take only the RGB part if it's rgba\n\n      // Create shader material\n      const material = new THREE.ShaderMaterial({\n        uniforms: {\n          time: {\n            value: 0\n          },\n          distortionFactor: {\n            value: 0\n          },\n          mousePos: {\n            value: new THREE.Vector2(0.5, 0.5)\n          },\n          color: {\n            value: color\n          },\n          textTexture: {\n            value: texture\n          }\n        },\n        vertexShader,\n        fragmentShader,\n        transparent: true\n      });\n      materialRef.current = material;\n\n      // Create mesh with proper aspect ratio\n      const geometry = new THREE.PlaneGeometry(2, 2 / containerAspect);\n      const mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n      let isAnimating = true;\n      const animate = () => {\n        if (!isAnimating || !material || !renderer || !scene || !camera) return;\n        material.uniforms.time.value += 0.01;\n        material.uniforms.mousePos.value.set(mousePos.current.x, mousePos.current.y);\n        renderer.render(scene, camera);\n        frameRef.current = requestAnimationFrame(animate);\n      };\n      frameRef.current = requestAnimationFrame(animate);\n\n      // Handle mouse movement\n      const handleMouseMove = e => {\n        var _containerRef$current;\n        const rect = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.getBoundingClientRect();\n        if (!rect) return;\n        mousePos.current = {\n          x: (e.clientX - rect.left) / rect.width,\n          y: 1 - (e.clientY - rect.top) / rect.height\n        };\n        if (materialRef.current) {\n          const dist = Math.hypot(mousePos.current.x - 0.5, mousePos.current.y - 0.5);\n          materialRef.current.uniforms.distortionFactor.value = Math.min(dist * 2, 1);\n        }\n      };\n      window.addEventListener('mousemove', handleMouseMove);\n\n      // Handle resize\n      const handleResize = () => {\n        if (!containerRef.current || !renderer || !camera) return;\n        const newWidth = containerRef.current.clientWidth;\n        const newHeight = isHeader ? window.innerHeight : containerRef.current.clientHeight;\n        const newAspect = newWidth / newHeight;\n        renderer.setSize(newWidth, newHeight);\n        camera.left = -1;\n        camera.right = 1;\n        camera.top = 1 / newAspect;\n        camera.bottom = -1 / newAspect;\n        camera.updateProjectionMatrix();\n      };\n      window.addEventListener('resize', handleResize);\n      handleResize();\n\n      // Handle WebGL context loss\n      const handleContextLost = () => {\n        isAnimating = false;\n        setHasError(true);\n      };\n      const handleContextRestored = () => {\n        isAnimating = true;\n        setHasError(false);\n      };\n      renderer.domElement.addEventListener('webglcontextlost', handleContextLost);\n      renderer.domElement.addEventListener('webglcontextrestored', handleContextRestored);\n      return () => {\n        isAnimating = false;\n        if (frameRef.current) {\n          cancelAnimationFrame(frameRef.current);\n        }\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('resize', handleResize);\n        renderer.domElement.removeEventListener('webglcontextlost', handleContextLost);\n        renderer.domElement.removeEventListener('webglcontextrestored', handleContextRestored);\n        renderer.dispose();\n        geometry.dispose();\n        material.dispose();\n        texture.dispose();\n      };\n    } catch (e) {\n      console.error('Setup error:', e);\n      setHasError(true);\n    }\n  }, [text, size, fill, isHeader, hasError]);\n  if (hasError) {\n    return /*#__PURE__*/_jsxDEV(FallbackText, {\n      $isHeader: isHeader,\n      className: className,\n      color: fill,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(TextContainer, {\n    ref: containerRef,\n    className: className,\n    $isHeader: isHeader\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 319,\n    columnNumber: 10\n  }, this);\n};\n_s(BlotterText, \"ujPIoopiJRr8Jys9QhNU/9YV+mY=\");\n_c3 = BlotterText;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"TextContainer\");\n$RefreshReg$(_c2, \"FallbackText\");\n$RefreshReg$(_c3, \"BlotterText\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","THREE","jsxDEV","_jsxDEV","TextContainer","div","props","$isHeader","_c","FallbackText","color","_c2","vertexShader","fragmentShader","webGLAvailable","canvas","document","createElement","window","WebGLRenderingContext","getContext","e","BlotterText","text","size","fill","className","isHeader","_s","containerRef","rendererRef","sceneRef","cameraRef","materialRef","mousePos","x","y","frameRef","hasError","setHasError","current","dispose","scene","Scene","camera","OrthographicCamera","position","z","renderer","WebGLRenderer","antialias","alpha","powerPreference","preserveDrawingBuffer","setPixelRatio","Math","min","devicePixelRatio","setSize","clientWidth","clientHeight","firstChild","removeChild","appendChild","domElement","ctx","containerWidth","containerHeight","innerHeight","containerAspect","textureWidth","pow","ceil","log2","textureHeight","width","height","clearRect","fontSize","floor","font","fillStyle","textAlign","textBaseline","textMetrics","measureText","textWidth","maxWidth","scale","fillText","texture","CanvasTexture","needsUpdate","minFilter","LinearFilter","magFilter","format","RedFormat","generateMipmaps","Color","setStyle","split","material","ShaderMaterial","uniforms","time","value","distortionFactor","Vector2","textTexture","transparent","geometry","PlaneGeometry","mesh","Mesh","add","isAnimating","animate","set","render","requestAnimationFrame","handleMouseMove","_containerRef$current","rect","getBoundingClientRect","clientX","left","clientY","top","dist","hypot","addEventListener","handleResize","newWidth","newHeight","newAspect","right","bottom","updateProjectionMatrix","handleContextLost","handleContextRestored","cancelAnimationFrame","removeEventListener","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c3","$RefreshReg$"],"sources":["/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/BlotterText.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\n\nconst TextContainer = styled.div<{ $isHeader?: boolean }>`\n  width: 100%;\n  height: ${props => props.$isHeader ? '100vh' : 'auto'};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  canvas {\n    width: 100% !important;\n    height: ${props => props.$isHeader ? '100vh' : 'auto'} !important;\n    object-fit: contain;\n  }\n`;\n\nconst FallbackText = styled.div<{ $isHeader?: boolean }>`\n  width: 100%;\n  height: ${props => props.$isHeader ? '100vh' : 'auto'};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: 'Creepster', cursive;\n  font-size: ${props => props.$isHeader ? '4rem' : '2rem'};\n  color: ${props => props.color || '#fff'};\n`;\n\ninterface BlotterTextProps {\n  text: string;\n  size?: number;\n  fill?: string;\n  className?: string;\n  isHeader?: boolean;\n}\n\nconst vertexShader = `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\n\nconst fragmentShader = `\n  uniform float time;\n  uniform float distortionFactor;\n  uniform vec2 mousePos;\n  uniform vec3 color;\n  uniform sampler2D textTexture;\n  varying vec2 vUv;\n\n  void main() {\n    vec2 uv = vUv;\n    \n    // Calculate distance from mouse with larger radius of influence\n    float dist = distance(mousePos, uv);\n    float influence = smoothstep(0.8, 0.0, dist) * distortionFactor;\n    \n    // Create wave effect with increased amplitude\n    float wave = sin(uv.x * 8.0 + time) * 0.08 * influence;\n    uv.y += wave;\n    \n    // Create liquid-like distortion with smoother movement\n    float distortion = sin(uv.x * 4.0 + time * 1.5) * cos(uv.y * 4.0 + time) * influence;\n    uv += distortion * 0.08;\n\n    // Sample the text texture with clamping\n    vec2 clampedUv = clamp(uv, 0.0, 1.0);\n    vec4 texColor = texture2D(textTexture, clampedUv);\n    \n    // Mix the text color with our desired color\n    gl_FragColor = vec4(color, texColor.r);\n  }\n`;\n\n// Static WebGL context checker\nconst webGLAvailable = (() => {\n  try {\n    const canvas = document.createElement('canvas');\n    return !!(window.WebGLRenderingContext && \n      (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\n  } catch (e) {\n    return false;\n  }\n})();\n\nexport const BlotterText: React.FC<BlotterTextProps> = ({ \n  text, \n  size = 100,\n  fill = '#fff',\n  className,\n  isHeader = false\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const cameraRef = useRef<THREE.OrthographicCamera | null>(null);\n  const materialRef = useRef<THREE.ShaderMaterial | null>(null);\n  const mousePos = useRef<{ x: number; y: number }>({ x: 0.5, y: 0.5 });\n  const frameRef = useRef<number>();\n  const [hasError, setHasError] = useState(!webGLAvailable);\n\n  useEffect(() => {\n    if (!containerRef.current || hasError) return;\n\n    try {\n      // Cleanup previous instance if it exists\n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n        rendererRef.current = null;\n      }\n\n      // Setup Three.js scene\n      const scene = new THREE.Scene();\n      sceneRef.current = scene;\n\n      // Setup camera\n      const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 10);\n      camera.position.z = 1;\n      cameraRef.current = camera;\n\n      // Setup renderer with error handling\n      const renderer = new THREE.WebGLRenderer({ \n        antialias: true, \n        alpha: true,\n        powerPreference: 'default',\n        preserveDrawingBuffer: true\n      });\n\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n      renderer.setSize(containerRef.current.clientWidth, containerRef.current.clientHeight);\n      rendererRef.current = renderer;\n      \n      // Clear container\n      while (containerRef.current.firstChild) {\n        containerRef.current.removeChild(containerRef.current.firstChild);\n      }\n      containerRef.current.appendChild(renderer.domElement);\n\n      // Create text texture\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d', { alpha: true });\n      if (!ctx) {\n        setHasError(true);\n        return;\n      }\n\n      // Set canvas size based on container size\n      const containerWidth = containerRef.current.clientWidth;\n      const containerHeight = isHeader ? window.innerHeight : containerRef.current.clientHeight;\n      const containerAspect = containerWidth / containerHeight;\n      \n      // Use power-of-two dimensions for textures\n      const textureWidth = Math.pow(2, Math.ceil(Math.log2(Math.min(2048, containerWidth))));\n      const textureHeight = Math.pow(2, Math.ceil(Math.log2(textureWidth / containerAspect)));\n      \n      canvas.width = textureWidth;\n      canvas.height = textureHeight;\n      \n      // Clear canvas with transparency\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      \n      // Calculate and set font size\n      const fontSize = isHeader \n        ? Math.floor(canvas.height * 0.25)\n        : Math.floor(canvas.height * 0.8);\n      \n      ctx.font = `bold ${fontSize}px Creepster`;\n      ctx.fillStyle = '#ffffff';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      \n      // Measure and scale text if needed\n      const textMetrics = ctx.measureText(text);\n      const textWidth = textMetrics.width;\n      const maxWidth = canvas.width * 0.9;\n      \n      if (textWidth > maxWidth) {\n        const scale = maxWidth / textWidth;\n        ctx.font = `bold ${Math.floor(fontSize * scale)}px Creepster`;\n      }\n      \n      // Draw text\n      ctx.fillText(text, canvas.width / 2, canvas.height / 2);\n\n      // Create texture with proper settings\n      const texture = new THREE.CanvasTexture(canvas);\n      texture.needsUpdate = true;\n      texture.minFilter = THREE.LinearFilter;\n      texture.magFilter = THREE.LinearFilter;\n      texture.format = THREE.RedFormat;\n      texture.generateMipmaps = false;\n\n      // Parse color properly\n      const color = new THREE.Color();\n      color.setStyle(fill.split(',')[0] || fill); // Take only the RGB part if it's rgba\n\n      // Create shader material\n      const material = new THREE.ShaderMaterial({\n        uniforms: {\n          time: { value: 0 },\n          distortionFactor: { value: 0 },\n          mousePos: { value: new THREE.Vector2(0.5, 0.5) },\n          color: { value: color },\n          textTexture: { value: texture }\n        },\n        vertexShader,\n        fragmentShader,\n        transparent: true\n      });\n      materialRef.current = material;\n\n      // Create mesh with proper aspect ratio\n      const geometry = new THREE.PlaneGeometry(2, 2 / containerAspect);\n      const mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n\n      let isAnimating = true;\n      const animate = () => {\n        if (!isAnimating || !material || !renderer || !scene || !camera) return;\n\n        material.uniforms.time.value += 0.01;\n        material.uniforms.mousePos.value.set(mousePos.current.x, mousePos.current.y);\n        \n        renderer.render(scene, camera);\n        frameRef.current = requestAnimationFrame(animate);\n      };\n\n      frameRef.current = requestAnimationFrame(animate);\n\n      // Handle mouse movement\n      const handleMouseMove = (e: MouseEvent) => {\n        const rect = containerRef.current?.getBoundingClientRect();\n        if (!rect) return;\n\n        mousePos.current = {\n          x: (e.clientX - rect.left) / rect.width,\n          y: 1 - (e.clientY - rect.top) / rect.height\n        };\n\n        if (materialRef.current) {\n          const dist = Math.hypot(\n            mousePos.current.x - 0.5,\n            mousePos.current.y - 0.5\n          );\n          materialRef.current.uniforms.distortionFactor.value = Math.min(dist * 2, 1);\n        }\n      };\n\n      window.addEventListener('mousemove', handleMouseMove);\n\n      // Handle resize\n      const handleResize = () => {\n        if (!containerRef.current || !renderer || !camera) return;\n        \n        const newWidth = containerRef.current.clientWidth;\n        const newHeight = isHeader ? window.innerHeight : containerRef.current.clientHeight;\n        const newAspect = newWidth / newHeight;\n        \n        renderer.setSize(newWidth, newHeight);\n        \n        camera.left = -1;\n        camera.right = 1;\n        camera.top = 1 / newAspect;\n        camera.bottom = -1 / newAspect;\n        camera.updateProjectionMatrix();\n      };\n\n      window.addEventListener('resize', handleResize);\n      handleResize();\n\n      // Handle WebGL context loss\n      const handleContextLost = () => {\n        isAnimating = false;\n        setHasError(true);\n      };\n\n      const handleContextRestored = () => {\n        isAnimating = true;\n        setHasError(false);\n      };\n\n      renderer.domElement.addEventListener('webglcontextlost', handleContextLost);\n      renderer.domElement.addEventListener('webglcontextrestored', handleContextRestored);\n\n      return () => {\n        isAnimating = false;\n        if (frameRef.current) {\n          cancelAnimationFrame(frameRef.current);\n        }\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('resize', handleResize);\n        renderer.domElement.removeEventListener('webglcontextlost', handleContextLost);\n        renderer.domElement.removeEventListener('webglcontextrestored', handleContextRestored);\n        renderer.dispose();\n        geometry.dispose();\n        material.dispose();\n        texture.dispose();\n      };\n    } catch (e) {\n      console.error('Setup error:', e);\n      setHasError(true);\n    }\n  }, [text, size, fill, isHeader, hasError]);\n\n  if (hasError) {\n    return (\n      <FallbackText \n        $isHeader={isHeader} \n        className={className}\n        color={fill}\n      >\n        {text}\n      </FallbackText>\n    );\n  }\n\n  return <TextContainer ref={containerRef} className={className} $isHeader={isHeader} />;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}