{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/BlotterText.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  canvas {\n    width: 100% !important;\n    height: auto !important;\n  }\n`;\n_c = TextContainer;\nconst vertexShader = `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\nconst fragmentShader = `\n  uniform float time;\n  uniform float distortionFactor;\n  uniform vec2 mousePos;\n  uniform vec3 color;\n  uniform sampler2D textTexture;\n  varying vec2 vUv;\n\n  void main() {\n    vec2 uv = vUv;\n    \n    // Calculate distance from mouse\n    float dist = distance(mousePos, uv);\n    float influence = smoothstep(0.5, 0.0, dist) * distortionFactor;\n    \n    // Create wave effect\n    float wave = sin(uv.x * 10.0 + time) * 0.05 * influence;\n    uv.y += wave;\n    \n    // Create liquid-like distortion\n    float distortion = sin(uv.x * 5.0 + time * 2.0) * cos(uv.y * 5.0 + time) * influence;\n    uv += distortion * 0.05;\n\n    // Sample the text texture\n    vec4 texColor = texture2D(textTexture, uv);\n    \n    // Mix the text color with our desired color\n    gl_FragColor = vec4(color * texColor.r, texColor.a);\n  }\n`;\nexport const BlotterText = ({\n  text,\n  size = 100,\n  fill = '#fff',\n  className\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const rendererRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const materialRef = useRef(null);\n  const mousePos = useRef({\n    x: 0.5,\n    y: 0.5\n  });\n  const frameRef = useRef();\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Setup Three.js scene\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Setup camera\n    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 10);\n    camera.position.z = 1;\n    cameraRef.current = camera;\n\n    // Setup renderer\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(containerRef.current.clientWidth, containerRef.current.clientHeight);\n    rendererRef.current = renderer;\n\n    // Clear container\n    while (containerRef.current.firstChild) {\n      containerRef.current.removeChild(containerRef.current.firstChild);\n    }\n    containerRef.current.appendChild(renderer.domElement);\n\n    // Create text texture\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size based on container size to maintain aspect ratio\n    const containerAspect = containerRef.current.clientWidth / containerRef.current.clientHeight;\n    canvas.width = 1024;\n    canvas.height = canvas.width / containerAspect;\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Calculate font size relative to canvas height\n    const fontSize = Math.floor(canvas.height * 0.8);\n    ctx.font = `bold ${fontSize}px Creepster`;\n    ctx.fillStyle = 'white';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    // Draw text in the center\n    ctx.fillText(text, canvas.width / 2, canvas.height / 2);\n    const texture = new THREE.CanvasTexture(canvas);\n    texture.needsUpdate = true;\n\n    // Create shader material\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: {\n          value: 0\n        },\n        distortionFactor: {\n          value: 0\n        },\n        mousePos: {\n          value: new THREE.Vector2(0.5, 0.5)\n        },\n        color: {\n          value: new THREE.Color(fill)\n        },\n        textTexture: {\n          value: texture\n        }\n      },\n      vertexShader,\n      fragmentShader,\n      transparent: true\n    });\n    materialRef.current = material;\n\n    // Create mesh with proper aspect ratio\n    const geometry = new THREE.PlaneGeometry(2, 2 / containerAspect);\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    // Animation loop\n    const animate = () => {\n      if (!material || !renderer || !scene || !camera) return;\n      material.uniforms.time.value += 0.01;\n      material.uniforms.mousePos.value.set(mousePos.current.x, mousePos.current.y);\n      renderer.render(scene, camera);\n      frameRef.current = requestAnimationFrame(animate);\n    };\n    frameRef.current = requestAnimationFrame(animate);\n\n    // Handle mouse movement\n    const handleMouseMove = e => {\n      var _containerRef$current;\n      const rect = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.getBoundingClientRect();\n      if (!rect) return;\n      mousePos.current = {\n        x: (e.clientX - rect.left) / rect.width,\n        y: 1 - (e.clientY - rect.top) / rect.height\n      };\n      if (materialRef.current) {\n        const dist = Math.hypot(mousePos.current.x - 0.5, mousePos.current.y - 0.5);\n        materialRef.current.uniforms.distortionFactor.value = Math.min(dist * 2, 1);\n      }\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Handle resize\n    const handleResize = () => {\n      if (!containerRef.current || !renderer || !camera) return;\n      const newWidth = containerRef.current.clientWidth;\n      const newHeight = containerRef.current.clientHeight;\n      const newAspect = newWidth / newHeight;\n      renderer.setSize(newWidth, newHeight);\n\n      // Update camera aspect\n      camera.left = -1;\n      camera.right = 1;\n      camera.top = 1 / newAspect;\n      camera.bottom = -1 / newAspect;\n      camera.updateProjectionMatrix();\n    };\n    window.addEventListener('resize', handleResize);\n    handleResize(); // Initial resize\n\n    return () => {\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current);\n      }\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('resize', handleResize);\n      renderer.dispose();\n    };\n  }, [text, size, fill]);\n  return /*#__PURE__*/_jsxDEV(TextContainer, {\n    ref: containerRef,\n    className: className\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 10\n  }, this);\n};\n_s(BlotterText, \"vrgW/8ORVWIid3KcXNHAtQdcfBQ=\");\n_c2 = BlotterText;\nvar _c, _c2;\n$RefreshReg$(_c, \"TextContainer\");\n$RefreshReg$(_c2, \"BlotterText\");","map":{"version":3,"names":["React","useEffect","useRef","styled","THREE","jsxDEV","_jsxDEV","TextContainer","div","_c","vertexShader","fragmentShader","BlotterText","text","size","fill","className","_s","containerRef","rendererRef","sceneRef","cameraRef","materialRef","mousePos","x","y","frameRef","current","scene","Scene","camera","OrthographicCamera","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","clientWidth","clientHeight","firstChild","removeChild","appendChild","domElement","canvas","document","createElement","ctx","getContext","containerAspect","width","height","fillStyle","fillRect","fontSize","Math","floor","font","textAlign","textBaseline","fillText","texture","CanvasTexture","needsUpdate","material","ShaderMaterial","uniforms","time","value","distortionFactor","Vector2","color","Color","textTexture","transparent","geometry","PlaneGeometry","mesh","Mesh","add","animate","set","render","requestAnimationFrame","handleMouseMove","e","_containerRef$current","rect","getBoundingClientRect","clientX","left","clientY","top","dist","hypot","min","window","addEventListener","handleResize","newWidth","newHeight","newAspect","right","bottom","updateProjectionMatrix","cancelAnimationFrame","removeEventListener","dispose","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/BlotterText.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\n\nconst TextContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  canvas {\n    width: 100% !important;\n    height: auto !important;\n  }\n`;\n\ninterface BlotterTextProps {\n  text: string;\n  size?: number;\n  fill?: string;\n  className?: string;\n}\n\nconst vertexShader = `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\n\nconst fragmentShader = `\n  uniform float time;\n  uniform float distortionFactor;\n  uniform vec2 mousePos;\n  uniform vec3 color;\n  uniform sampler2D textTexture;\n  varying vec2 vUv;\n\n  void main() {\n    vec2 uv = vUv;\n    \n    // Calculate distance from mouse\n    float dist = distance(mousePos, uv);\n    float influence = smoothstep(0.5, 0.0, dist) * distortionFactor;\n    \n    // Create wave effect\n    float wave = sin(uv.x * 10.0 + time) * 0.05 * influence;\n    uv.y += wave;\n    \n    // Create liquid-like distortion\n    float distortion = sin(uv.x * 5.0 + time * 2.0) * cos(uv.y * 5.0 + time) * influence;\n    uv += distortion * 0.05;\n\n    // Sample the text texture\n    vec4 texColor = texture2D(textTexture, uv);\n    \n    // Mix the text color with our desired color\n    gl_FragColor = vec4(color * texColor.r, texColor.a);\n  }\n`;\n\nexport const BlotterText: React.FC<BlotterTextProps> = ({ \n  text, \n  size = 100,\n  fill = '#fff',\n  className \n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const cameraRef = useRef<THREE.OrthographicCamera | null>(null);\n  const materialRef = useRef<THREE.ShaderMaterial | null>(null);\n  const mousePos = useRef<{ x: number; y: number }>({ x: 0.5, y: 0.5 });\n  const frameRef = useRef<number>();\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Setup Three.js scene\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Setup camera\n    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 10);\n    camera.position.z = 1;\n    cameraRef.current = camera;\n\n    // Setup renderer\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.setSize(containerRef.current.clientWidth, containerRef.current.clientHeight);\n    rendererRef.current = renderer;\n    \n    // Clear container\n    while (containerRef.current.firstChild) {\n      containerRef.current.removeChild(containerRef.current.firstChild);\n    }\n    containerRef.current.appendChild(renderer.domElement);\n\n    // Create text texture\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size based on container size to maintain aspect ratio\n    const containerAspect = containerRef.current.clientWidth / containerRef.current.clientHeight;\n    canvas.width = 1024;\n    canvas.height = canvas.width / containerAspect;\n    \n    ctx.fillStyle = 'black';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    \n    // Calculate font size relative to canvas height\n    const fontSize = Math.floor(canvas.height * 0.8);\n    ctx.font = `bold ${fontSize}px Creepster`;\n    ctx.fillStyle = 'white';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    \n    // Draw text in the center\n    ctx.fillText(text, canvas.width / 2, canvas.height / 2);\n\n    const texture = new THREE.CanvasTexture(canvas);\n    texture.needsUpdate = true;\n\n    // Create shader material\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: { value: 0 },\n        distortionFactor: { value: 0 },\n        mousePos: { value: new THREE.Vector2(0.5, 0.5) },\n        color: { value: new THREE.Color(fill) },\n        textTexture: { value: texture }\n      },\n      vertexShader,\n      fragmentShader,\n      transparent: true\n    });\n    materialRef.current = material;\n\n    // Create mesh with proper aspect ratio\n    const geometry = new THREE.PlaneGeometry(2, 2 / containerAspect);\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    // Animation loop\n    const animate = () => {\n      if (!material || !renderer || !scene || !camera) return;\n\n      material.uniforms.time.value += 0.01;\n      material.uniforms.mousePos.value.set(mousePos.current.x, mousePos.current.y);\n      \n      renderer.render(scene, camera);\n      frameRef.current = requestAnimationFrame(animate);\n    };\n\n    frameRef.current = requestAnimationFrame(animate);\n\n    // Handle mouse movement\n    const handleMouseMove = (e: MouseEvent) => {\n      const rect = containerRef.current?.getBoundingClientRect();\n      if (!rect) return;\n\n      mousePos.current = {\n        x: (e.clientX - rect.left) / rect.width,\n        y: 1 - (e.clientY - rect.top) / rect.height\n      };\n\n      if (materialRef.current) {\n        const dist = Math.hypot(\n          mousePos.current.x - 0.5,\n          mousePos.current.y - 0.5\n        );\n        materialRef.current.uniforms.distortionFactor.value = Math.min(dist * 2, 1);\n      }\n    };\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Handle resize\n    const handleResize = () => {\n      if (!containerRef.current || !renderer || !camera) return;\n      \n      const newWidth = containerRef.current.clientWidth;\n      const newHeight = containerRef.current.clientHeight;\n      const newAspect = newWidth / newHeight;\n      \n      renderer.setSize(newWidth, newHeight);\n      \n      // Update camera aspect\n      camera.left = -1;\n      camera.right = 1;\n      camera.top = 1 / newAspect;\n      camera.bottom = -1 / newAspect;\n      camera.updateProjectionMatrix();\n    };\n\n    window.addEventListener('resize', handleResize);\n    handleResize(); // Initial resize\n\n    return () => {\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current);\n      }\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('resize', handleResize);\n      renderer.dispose();\n    };\n  }, [text, size, fill]);\n\n  return <TextContainer ref={containerRef} className={className} />;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}