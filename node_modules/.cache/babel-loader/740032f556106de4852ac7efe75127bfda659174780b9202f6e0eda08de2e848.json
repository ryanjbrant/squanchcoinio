{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/InteractiveFeatures.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { config } from '../config';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst noiseAnimation = keyframes`\n  0% { transform: translate(0, 0); }\n  10% { transform: translate(-5%, -5%); }\n  20% { transform: translate(-10%, 5%); }\n  30% { transform: translate(5%, -10%); }\n  40% { transform: translate(-5%, 15%); }\n  50% { transform: translate(-10%, 5%); }\n  60% { transform: translate(15%, 0); }\n  70% { transform: translate(0, 10%); }\n  80% { transform: translate(-15%, 0); }\n  90% { transform: translate(10%, 5%); }\n  100% { transform: translate(5%, 0); }\n`;\nconst Section = styled.section`\n  background-color: black;\n  position: relative;\n  overflow: hidden;\n  min-height: 100vh;\n  margin-top: 0;\n  padding: 0;\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: -150%;\n    left: -150%;\n    width: 400%;\n    height: 400%;\n    background-image: url(\"data:image/svg+xml,%3Csvg viewBox='0 0 3000 3000' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.6' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E\");\n    opacity: 0.12;\n    animation: ${noiseAnimation} 1s steps(2) infinite;\n    pointer-events: none;\n  }\n`;\n_c = Section;\nconst FeaturesContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 6rem 2rem;\n  width: 100%;\n  max-width: 1400px;\n  margin: 0 auto;\n  position: relative;\n  z-index: 1;\n`;\n_c2 = FeaturesContainer;\nconst QuantumTerminal = styled.div`\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(255, 215, 0, 0.3);\n  border-radius: 15px;\n  padding: 3rem;\n  color: white;\n  backdrop-filter: blur(10px);\n  box-shadow: 0 0 20px rgba(255, 215, 0, 0.1);\n  width: 100%;\n  max-width: 800px;\n  min-height: 400px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n_c3 = QuantumTerminal;\nconst glowPulse = keyframes`\n  0% { box-shadow: 0 0 20px rgba(128, 0, 255, 0.4); }\n  50% { box-shadow: 0 0 40px rgba(128, 0, 255, 0.6); }\n  100% { box-shadow: 0 0 20px rgba(128, 0, 255, 0.4); }\n`;\nconst MainButton = styled.button`\n  background: black;\n  color: white;\n  border: none;\n  padding: 1.5rem 3rem;\n  border-radius: 30px;\n  font-size: 1.5rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  font-family: 'Creepster', cursive;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n  animation: ${glowPulse} 2s infinite;\n\n  &:hover {\n    transform: scale(1.05);\n    animation: ${glowPulse} 1s infinite;\n  }\n`;\n_c4 = MainButton;\nconst TerminalColors = {\n  success: '#98c379',\n  // green\n  error: '#e06c75',\n  // red\n  warning: '#e5c07b',\n  // yellow\n  info: '#61afef',\n  // blue\n  prompt: '#c678dd',\n  // purple\n  path: '#56b6c2',\n  // cyan\n  command: '#abb2bf',\n  // white\n  comment: '#5c6370' // gray\n};\nconst LoadingSequence = styled.div`\n  font-family: 'Source Code Pro', monospace;\n  font-size: 1rem;\n  color: ${TerminalColors.command};\n  text-align: left;\n  width: 100%;\n  margin-bottom: 2rem;\n  background: #282c34;\n  padding: 1rem;\n  border-radius: 8px;\n  border: 1px solid #3e4451;\n  height: 400px;\n  overflow-y: auto;\n  position: relative;\n\n  &::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: rgba(171, 178, 191, 0.1);\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: rgba(171, 178, 191, 0.3);\n    border-radius: 4px;\n  }\n`;\n_c5 = LoadingSequence;\nconst ProgressText = styled.div`\n  margin: 0.2rem 0;\n  opacity: 0.9;\n  position: relative;\n  padding-left: 1.5rem;\n  line-height: 1.4;\n  color: ${TerminalColors.command};\n\n  &::before {\n    content: '➜';\n    position: absolute;\n    left: 0;\n    color: ${TerminalColors.prompt};\n  }\n\n  span {\n    color: inherit;\n  }\n`;\n_c6 = ProgressText;\nconst Spinner = styled.div`\n  display: inline-block;\n  margin-right: 8px;\n  width: 1em;\n  height: 1em;\n  position: relative;\n  \n  &::after {\n    content: '⠋';\n    animation: spinnerAnimation 1s steps(10, end) infinite;\n  }\n\n  @keyframes spinnerAnimation {\n    11% { content: '⠙'; }\n    22% { content: '⠹'; }\n    33% { content: '⠸'; }\n    44% { content: '⠼'; }\n    55% { content: '⠴'; }\n    66% { content: '⠦'; }\n    77% { content: '⠧'; }\n    88% { content: '⠇'; }\n    99% { content: '⠏'; }\n  }\n`;\n_c7 = Spinner;\nconst LoadingBar = styled.div`\n  font-family: 'Source Code Pro', monospace;\n  color: ${TerminalColors.command};\n  margin: 0.2rem 0;\n  opacity: 0.9;\n  white-space: pre;\n`;\n_c8 = LoadingBar;\nconst ErrorText = styled.div`\n  color: ${TerminalColors.error};\n  margin: 0.2rem 0;\n  padding-left: 1.5rem;\n  opacity: 0.9;\n`;\n_c9 = ErrorText;\nconst WarningText = styled.div`\n  color: ${TerminalColors.warning};\n  margin: 0.2rem 0;\n  padding-left: 1.5rem;\n  opacity: 0.9;\n`;\n_c10 = WarningText;\nconst RetryText = styled.div`\n  color: ${TerminalColors.info};\n  margin: 0.2rem 0;\n  padding-left: 1.5rem;\n  opacity: 0.9;\n`;\n_c11 = RetryText;\nconst Cursor = styled.span`\n  display: inline-block;\n  width: 8px;\n  height: 15px;\n  background: #0f0;\n  margin-left: 4px;\n  animation: blink 1s step-end infinite;\n\n  @keyframes blink {\n    50% { opacity: 0; }\n  }\n`;\n_c12 = Cursor;\nconst ArtifactDisplay = styled.div`\n  margin-top: 2rem;\n  padding: 2rem;\n  background: rgba(0, 0, 0, 0.5);\n  border-radius: 15px;\n  border: 1px solid rgba(255, 215, 0, 0.2);\n  width: 100%;\n`;\n_c13 = ArtifactDisplay;\nconst ArtifactImage = styled.img`\n  width: 100%;\n  max-width: 400px;\n  height: auto;\n  margin: 2rem auto;\n  display: block;\n  border-radius: 10px;\n  border: 2px solid rgba(128, 0, 255, 0.3);\n`;\n_c14 = ArtifactImage;\nconst ArtifactText = styled.div`\n  font-family: 'Creepster', cursive;\n  font-size: 1.2rem;\n  color: #fff;\n  margin: 1rem 0;\n  text-align: center;\n`;\n_c15 = ArtifactText;\nconst packageLoadingStates = [{\n  name: \"quantum-core\",\n  size: \"256MB\"\n}, {\n  name: \"dimensional-bridge\",\n  size: \"512MB\"\n}, {\n  name: \"reality-parser\",\n  size: \"128MB\"\n}, {\n  name: \"multiverse-scanner\",\n  size: \"1GB\"\n}, {\n  name: \"artifact-compiler\",\n  size: \"384MB\"\n}, {\n  name: \"neural-interface\",\n  size: \"768MB\"\n}, {\n  name: \"quantum-stabilizer\",\n  size: \"192MB\"\n}, {\n  name: \"entropy-reducer\",\n  size: \"448MB\"\n}, {\n  name: \"timeline-synchronizer\",\n  size: \"896MB\"\n}, {\n  name: \"void-mapper\",\n  size: \"320MB\"\n}];\nconst hackingMessages = [\"Initializing quantum breach protocol...\", \"Accessing dimensional gateway...\", \"Bypassing security matrix...\", \"Injecting polymorphic code sequence...\", \"Scanning parallel universes...\", \"Decrypting interdimensional protocols...\", \"Loading quantum encryption keys...\", \"Establishing neural network uplink...\", \"Accessing forbidden database sectors...\", \"Compiling dimensional coordinates...\", \"Installing quantum drivers...\", \"Running security bypass...\", \"Initializing reality distortion field...\", \"Loading dimensional translation matrix...\", \"Accessing forbidden knowledge banks...\", \"Injecting consciousness transfer protocols...\", \"Scanning dimensional frequencies...\", \"Calibrating quantum stabilizers...\", \"Loading artifact manifestation drivers...\", \"Compiling interdimensional data streams...\"];\nconst installationMessages = [\"Installing quantum visualization drivers...\", \"Downloading artifact materialization modules...\", \"Updating neural pattern recognition...\", \"Installing dimensional calibration tools...\", \"Configuring reality anchors...\", \"Setting up quantum entanglement protocols...\", \"Installing parallel universe scanners...\", \"Updating dimensional drift compensators...\", \"Installing artifact containment systems...\", \"Configuring safety protocol databases...\"];\nconst processingMessages = [\"Processing quantum fluctuations...\", \"Analyzing dimensional resonance...\", \"Calculating probability matrices...\", \"Stabilizing reality anchors...\", \"Verifying quantum signatures...\", \"Processing temporal data...\", \"Analyzing artifact composition...\", \"Calculating dimensional stability...\", \"Processing quantum entanglement...\", \"Verifying containment parameters...\"];\nconst generateRandomHex = () => {\n  return Math.random().toString(16).substring(2, 8).toUpperCase();\n};\nconst generateRandomPath = () => {\n  const paths = ['/quantum/matrix/', '/dimensional/gateway/', '/neural/network/', '/reality/core/', '/forbidden/knowledge/'];\n  return paths[Math.floor(Math.random() * paths.length)] + generateRandomHex();\n};\nconst loadingSteps = [\"Generating quantum seed\", \"Activating terminal\", \"Hard booting terminal accelerator\", \"Establishing interdimensional connection\", \"Scanning multiverse frequencies\", \"Bypassing quantum firewall\", \"Accessing artifact database\", \"Stabilizing dimensional rift\", \"Verifying artifact integrity\", \"Materializing quantum data\"];\nconst generateDimensionalCoordinate = () => {\n  const dimension = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n  const number = Math.floor(Math.random() * 1000);\n  const subDimension = Math.floor(Math.random() * 100);\n  return `${dimension}-${number}.${subDimension}`;\n};\nconst errorMessages = [\"ERROR: Quantum entanglement desynchronization detected\", \"CRITICAL: Buffer overflow in dimensional matrix\", \"FATAL: Memory corruption in reality anchor\", \"ERROR: Failed to establish neural handshake\", \"CRITICAL: Quantum state collapse imminent\", \"ERROR: Dimensional breach detected in sector\", \"FATAL: Stack overflow in consciousness stream\", \"ERROR: Failed to validate reality signature\", \"CRITICAL: Unauthorized timeline modification detected\", \"FATAL: Neural network cascade failure\"];\nconst recoveryMessages = [\"Attempting quantum state recovery...\", \"Reinitializing dimensional buffers...\", \"Reconstructing reality matrix...\", \"Emergency protocol initiated...\", \"Restoring quantum coherence...\", \"Realigning dimensional vectors...\", \"Rebuilding neural pathways...\", \"Stabilizing quantum field...\", \"Repairing timeline integrity...\", \"Engaging backup systems...\"];\nexport const InteractiveFeatures = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [loadingProgress, setLoadingProgress] = useState([]);\n  const [hackingOutput, setHackingOutput] = useState([]);\n  const [artifactData, setArtifactData] = useState(null);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [installProgress, setInstallProgress] = useState([]);\n  const [packageLoading, setPackageLoading] = useState(null);\n  const [packageStates, setPackageStates] = useState([]);\n  const [spinnerIndex, setSpinnerIndex] = useState(0);\n  useEffect(() => {\n    if (loading && currentStep < loadingSteps.length) {\n      // Main loading step\n      const timer = setTimeout(() => {\n        const coordinate = generateDimensionalCoordinate();\n        const stepText = currentStep === 1 ? `${loadingSteps[currentStep]} ${coordinate}` : loadingSteps[currentStep];\n        setLoadingProgress(prev => [...prev, `${stepText}...${(currentStep + 1) * 10}%`]);\n        setCurrentStep(prev => prev + 1);\n        if (currentStep === loadingSteps.length - 1) {\n          setIsGenerating(true);\n          generateArtifact();\n        }\n      }, 1000);\n\n      // Random hacking messages with errors\n      const hackingTimer = setInterval(() => {\n        const shouldError = Math.random() < 0.3;\n        const shouldWarn = Math.random() < 0.2;\n        const shouldCriticalError = Math.random() < 0.1;\n        if (shouldCriticalError) {\n          setHackingOutput(prev => [...prev, `<span style=\"color: ${TerminalColors.error}\">[FATAL] ${errorMessages[Math.floor(Math.random() * errorMessages.length)]}</span>`, `<span style=\"color: ${TerminalColors.warning}\">[SYSTEM] Initiating emergency recovery sequence...</span>`, `<span style=\"color: ${TerminalColors.info}\">[RECOVERY] ${recoveryMessages[Math.floor(Math.random() * recoveryMessages.length)]}</span>`]);\n        } else if (shouldError) {\n          setHackingOutput(prev => [...prev, `<span style=\"color: ${TerminalColors.error}\">[ERROR] Memory corruption at 0x${generateRandomHex()}</span>`, `<span style=\"color: ${TerminalColors.warning}\">[SYSTEM] Attempting memory reallocation...</span>`]);\n        } else if (shouldWarn) {\n          setHackingOutput(prev => [...prev, `<span style=\"color: ${TerminalColors.warning}\">[WARNING] Unstable quantum signature detected in sector 0x${generateRandomHex()}</span>`]);\n        } else {\n          const randomMessage = hackingMessages[Math.floor(Math.random() * hackingMessages.length)];\n          const path = generateRandomPath();\n          setHackingOutput(prev => [...prev, `<span style=\"color: ${TerminalColors.command}\">[${path}] ${randomMessage}</span>`]);\n        }\n      }, 200);\n      return () => {\n        clearTimeout(timer);\n        clearInterval(hackingTimer);\n      };\n    }\n  }, [loading, currentStep]);\n\n  // Keep terminal active during generation\n  useEffect(() => {\n    if (isGenerating) {\n      // Installation progress\n      const installTimer = setInterval(() => {\n        const message = installationMessages[Math.floor(Math.random() * installationMessages.length)];\n        const progress = Math.floor(Math.random() * 100);\n        setInstallProgress(prev => [...prev.slice(-5), {\n          message,\n          progress\n        }]);\n      }, 800);\n\n      // Processing messages\n      const processTimer = setInterval(() => {\n        const message = processingMessages[Math.floor(Math.random() * processingMessages.length)];\n        setHackingOutput(prev => [...prev, `[PROCESS] ${message}`].slice(-20));\n      }, 300);\n      return () => {\n        clearInterval(installTimer);\n        clearInterval(processTimer);\n      };\n    }\n  }, [isGenerating]);\n\n  // Add package loading effect\n  useEffect(() => {\n    if (isGenerating) {\n      let currentPackageIndex = 0;\n      const simulatePackageInstall = () => {\n        const pkg = packageLoadingStates[currentPackageIndex];\n        const speed = `${Math.floor(Math.random() * 100) + 50}MB/s`;\n        setPackageStates(prev => {\n          const newStates = [...prev];\n          const existingPkg = newStates.find(p => p.name === pkg.name);\n          if (existingPkg) {\n            existingPkg.status = 'downloading';\n            existingPkg.progress += Math.floor(Math.random() * 10) + 5;\n            existingPkg.speed = speed;\n            if (existingPkg.progress >= 100) {\n              existingPkg.status = 'success';\n              existingPkg.progress = 100;\n              setHackingOutput(prev => [...prev, `<span style=\"color: ${TerminalColors.success}\">[SUCCESS] ${pkg.name} successfully integrated into quantum matrix</span>`]);\n              currentPackageIndex = (currentPackageIndex + 1) % packageLoadingStates.length;\n            }\n          } else {\n            newStates.push({\n              name: pkg.name,\n              size: pkg.size,\n              progress: 0,\n              speed,\n              status: 'downloading',\n              attempts: 1\n            });\n            setHackingOutput(prev => [...prev, `<span style=\"color: ${TerminalColors.info}\">[INIT] Starting installation of ${pkg.name} (${pkg.size})</span>`]);\n          }\n          return newStates;\n        });\n      };\n      const packageTimer = setInterval(simulatePackageInstall, 150);\n      return () => clearInterval(packageTimer);\n    } else {\n      setPackageStates([]);\n    }\n  }, [isGenerating]);\n  const makeOpenAIRequest = async (messages, maxTokens) => {\n    const apiKey = config.openaiApiKey;\n    if (!apiKey) {\n      throw new Error('OpenAI API key is not configured');\n    }\n    try {\n      var _data$choices$, _data$choices$$messag;\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages,\n          max_tokens: maxTokens\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error('OpenAI API Error:', {\n          status: response.status,\n          statusText: response.statusText,\n          error: errorData\n        });\n        throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      return ((_data$choices$ = data.choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content) || '';\n    } catch (error) {\n      console.error('Request error:', error);\n      throw error;\n    }\n  };\n  const generateImage = async prompt => {\n    const apiKey = config.openaiApiKey;\n    if (!apiKey) {\n      throw new Error('OpenAI API key is not configured');\n    }\n    const enhancedPrompt = `Create a highly detailed, Rick and Morty style interdimensional artifact. The artifact should be a strange, alien device or object with glowing elements and intricate mechanical details. Style: Vibrant colors, sci-fi aesthetic, detailed mechanical parts. Important: The image must not contain any text, numbers, symbols, or writing of any kind. The image should focus purely on the visual appearance of the artifact without any textual elements.`;\n    const negativePrompt = \"text, writing, numbers, symbols, letters, characters, words, labels, signs, watermarks, signatures, logos\";\n    try {\n      const response = await fetch('https://api.openai.com/v1/images/generations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: \"dall-e-3\",\n          prompt: enhancedPrompt,\n          n: 1,\n          size: \"1024x1024\",\n          quality: \"hd\",\n          style: \"vivid\"\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Image generation failed: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data.data[0].url;\n    } catch (error) {\n      console.error('Error generating image:', error);\n      throw error;\n    }\n  };\n  const generateArtifact = async () => {\n    try {\n      const [prediction, survivalTip] = await Promise.all([makeOpenAIRequest([{\n        role: \"system\",\n        content: \"You are an interdimensional artifact analyzer providing quirky, Rick and Morty-style analysis. Describe a weird, unique interdimensional artifact that could exist in the Rick and Morty universe. Keep responses concise (2-3 sentences), entertaining, and mysterious. Focus on the physical appearance and strange properties of the artifact.\"\n      }, {\n        role: \"user\",\n        content: \"Generate a random interdimensional artifact analysis or prediction.\"\n      }], 100), makeOpenAIRequest([{\n        role: \"system\",\n        content: \"You are an advanced AI providing survival tips related to interdimensional artifacts. Include specific warnings about handling the artifact. Keep it in the style of Rick and Morty.\"\n      }, {\n        role: \"user\",\n        content: \"Generate a survival tip for handling an interdimensional artifact.\"\n      }], 150)]);\n      const imageUrl = await generateImage(prediction);\n      setArtifactData({\n        prediction,\n        survivalTip,\n        imageUrl\n      });\n    } catch (error) {\n      console.error('Error generating artifact:', error);\n      setArtifactData({\n        prediction: 'Error connecting to the multiverse. Please try again.',\n        survivalTip: 'Connection lost. Unable to retrieve safety protocols.',\n        imageUrl: ''\n      });\n    } finally {\n      setIsGenerating(false);\n      setLoading(false);\n    }\n  };\n  const startGeneration = () => {\n    setLoading(true);\n    setCurrentStep(0);\n    setLoadingProgress([]);\n    setArtifactData(null);\n  };\n  const renderPackageStatus = pkg => {\n    switch (pkg.status) {\n      case 'error':\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ErrorText, {\n            children: [\"\\u2717 Failed to install \", pkg.name, \" (Attempt \", pkg.attempts, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 675,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(RetryText, {\n            children: [\"\\u21BA Retrying installation... [Quantum stability: \", Math.floor(Math.random() * 40 + 60), \"%]\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ProgressText, {\n            style: {\n              color: TerminalColors.error\n            },\n            children: [\"\\u2514\\u2500 Error at memory address 0x\", generateRandomHex()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      case 'warning':\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(WarningText, {\n            children: [\"\\u26A0 Unstable quantum fluctuations detected in \", pkg.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 685,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ProgressText, {\n            style: {\n              color: TerminalColors.warning\n            },\n            children: [\"\\u2514\\u2500 Applying quantum stabilizers... [\", '.'.repeat(Math.floor(Math.random() * 20)), \"]\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      case 'success':\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ProgressText, {\n            style: {\n              color: TerminalColors.success\n            },\n            children: [\"\\u2713 Successfully installed \", pkg.name, \" [\", '.'.repeat(20), \"] 100%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ProgressText, {\n            style: {\n              color: TerminalColors.comment\n            },\n            children: [\"\\u2514\\u2500 Quantum signature verified: 0x\", generateRandomHex()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      default:\n        return /*#__PURE__*/_jsxDEV(LoadingBar, {\n          children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 13\n          }, this), \"Installing \", pkg.name, \" [\", '.'.repeat(Math.floor(pkg.progress / 5)), \"] \", pkg.progress, \"%\", /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              paddingLeft: '24px',\n              fontSize: '0.9em',\n              opacity: 0.7,\n              color: TerminalColors.comment\n            },\n            children: [\"Size: \", pkg.size, \" | Speed: \", pkg.speed, \" | Memory: 0x\", generateRandomHex()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 11\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Section, {\n    children: /*#__PURE__*/_jsxDEV(FeaturesContainer, {\n      children: /*#__PURE__*/_jsxDEV(QuantumTerminal, {\n        children: [!loading && !artifactData && /*#__PURE__*/_jsxDEV(MainButton, {\n          onClick: startGeneration,\n          children: \"Generate Quantum Squanch Artifact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 13\n        }, this), (loading || isGenerating) && /*#__PURE__*/_jsxDEV(LoadingSequence, {\n          children: [loadingProgress.map((step, index) => /*#__PURE__*/_jsxDEV(ProgressText, {\n            children: step\n          }, `progress-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 728,\n            columnNumber: 17\n          }, this)), isGenerating && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: packageStates.map((pkg, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: renderPackageStatus(pkg)\n            }, `pkg-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 733,\n              columnNumber: 21\n            }, this))\n          }, void 0, false), hackingOutput.map((output, index) => /*#__PURE__*/_jsxDEV(ProgressText, {\n            dangerouslySetInnerHTML: {\n              __html: output\n            }\n          }, `hacking-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 740,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(Cursor, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 745,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 13\n        }, this), artifactData && !loading && !isGenerating && /*#__PURE__*/_jsxDEV(ArtifactDisplay, {\n          children: [/*#__PURE__*/_jsxDEV(ArtifactText, {\n            children: artifactData.prediction\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 751,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ArtifactImage, {\n            src: artifactData.imageUrl,\n            alt: \"Quantum Artifact\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 752,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ArtifactText, {\n            children: \"\\u26A0 Safety Protocol:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 753,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ArtifactText, {\n            children: artifactData.survivalTip\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 754,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 718,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 717,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 716,\n    columnNumber: 5\n  }, this);\n};\n_s(InteractiveFeatures, \"G53QT1yCll++TzNmhmgp8QauqlU=\");\n_c16 = InteractiveFeatures;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"Section\");\n$RefreshReg$(_c2, \"FeaturesContainer\");\n$RefreshReg$(_c3, \"QuantumTerminal\");\n$RefreshReg$(_c4, \"MainButton\");\n$RefreshReg$(_c5, \"LoadingSequence\");\n$RefreshReg$(_c6, \"ProgressText\");\n$RefreshReg$(_c7, \"Spinner\");\n$RefreshReg$(_c8, \"LoadingBar\");\n$RefreshReg$(_c9, \"ErrorText\");\n$RefreshReg$(_c10, \"WarningText\");\n$RefreshReg$(_c11, \"RetryText\");\n$RefreshReg$(_c12, \"Cursor\");\n$RefreshReg$(_c13, \"ArtifactDisplay\");\n$RefreshReg$(_c14, \"ArtifactImage\");\n$RefreshReg$(_c15, \"ArtifactText\");\n$RefreshReg$(_c16, \"InteractiveFeatures\");","map":{"version":3,"names":["React","useState","useEffect","styled","keyframes","config","jsxDEV","_jsxDEV","Fragment","_Fragment","noiseAnimation","Section","section","_c","FeaturesContainer","div","_c2","QuantumTerminal","_c3","glowPulse","MainButton","button","_c4","TerminalColors","success","error","warning","info","prompt","path","command","comment","LoadingSequence","_c5","ProgressText","_c6","Spinner","_c7","LoadingBar","_c8","ErrorText","_c9","WarningText","_c10","RetryText","_c11","Cursor","span","_c12","ArtifactDisplay","_c13","ArtifactImage","img","_c14","ArtifactText","_c15","packageLoadingStates","name","size","hackingMessages","installationMessages","processingMessages","generateRandomHex","Math","random","toString","substring","toUpperCase","generateRandomPath","paths","floor","length","loadingSteps","generateDimensionalCoordinate","dimension","String","fromCharCode","number","subDimension","errorMessages","recoveryMessages","InteractiveFeatures","_s","loading","setLoading","currentStep","setCurrentStep","loadingProgress","setLoadingProgress","hackingOutput","setHackingOutput","artifactData","setArtifactData","isGenerating","setIsGenerating","installProgress","setInstallProgress","packageLoading","setPackageLoading","packageStates","setPackageStates","spinnerIndex","setSpinnerIndex","timer","setTimeout","coordinate","stepText","prev","generateArtifact","hackingTimer","setInterval","shouldError","shouldWarn","shouldCriticalError","randomMessage","clearTimeout","clearInterval","installTimer","message","progress","slice","processTimer","currentPackageIndex","simulatePackageInstall","pkg","speed","newStates","existingPkg","find","p","status","push","attempts","packageTimer","makeOpenAIRequest","messages","maxTokens","apiKey","openaiApiKey","Error","_data$choices$","_data$choices$$messag","response","fetch","method","headers","body","JSON","stringify","model","max_tokens","ok","errorData","text","console","statusText","data","json","choices","content","generateImage","enhancedPrompt","negativePrompt","n","quality","style","url","prediction","survivalTip","Promise","all","role","imageUrl","startGeneration","renderPackageStatus","children","fileName","_jsxFileName","lineNumber","columnNumber","color","repeat","paddingLeft","fontSize","opacity","onClick","map","step","index","output","dangerouslySetInnerHTML","__html","src","alt","_c16","$RefreshReg$"],"sources":["/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/InteractiveFeatures.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled, { keyframes, css } from 'styled-components';\nimport { config } from '../config';\n\nconst noiseAnimation = keyframes`\n  0% { transform: translate(0, 0); }\n  10% { transform: translate(-5%, -5%); }\n  20% { transform: translate(-10%, 5%); }\n  30% { transform: translate(5%, -10%); }\n  40% { transform: translate(-5%, 15%); }\n  50% { transform: translate(-10%, 5%); }\n  60% { transform: translate(15%, 0); }\n  70% { transform: translate(0, 10%); }\n  80% { transform: translate(-15%, 0); }\n  90% { transform: translate(10%, 5%); }\n  100% { transform: translate(5%, 0); }\n`;\n\nconst Section = styled.section`\n  background-color: black;\n  position: relative;\n  overflow: hidden;\n  min-height: 100vh;\n  margin-top: 0;\n  padding: 0;\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: -150%;\n    left: -150%;\n    width: 400%;\n    height: 400%;\n    background-image: url(\"data:image/svg+xml,%3Csvg viewBox='0 0 3000 3000' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.6' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E\");\n    opacity: 0.12;\n    animation: ${noiseAnimation} 1s steps(2) infinite;\n    pointer-events: none;\n  }\n`;\n\nconst FeaturesContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 6rem 2rem;\n  width: 100%;\n  max-width: 1400px;\n  margin: 0 auto;\n  position: relative;\n  z-index: 1;\n`;\n\nconst QuantumTerminal = styled.div`\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(255, 215, 0, 0.3);\n  border-radius: 15px;\n  padding: 3rem;\n  color: white;\n  backdrop-filter: blur(10px);\n  box-shadow: 0 0 20px rgba(255, 215, 0, 0.1);\n  width: 100%;\n  max-width: 800px;\n  min-height: 400px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst glowPulse = keyframes`\n  0% { box-shadow: 0 0 20px rgba(128, 0, 255, 0.4); }\n  50% { box-shadow: 0 0 40px rgba(128, 0, 255, 0.6); }\n  100% { box-shadow: 0 0 20px rgba(128, 0, 255, 0.4); }\n`;\n\nconst MainButton = styled.button`\n  background: black;\n  color: white;\n  border: none;\n  padding: 1.5rem 3rem;\n  border-radius: 30px;\n  font-size: 1.5rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  font-family: 'Creepster', cursive;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n  animation: ${glowPulse} 2s infinite;\n\n  &:hover {\n    transform: scale(1.05);\n    animation: ${glowPulse} 1s infinite;\n  }\n`;\n\nconst TerminalColors = {\n  success: '#98c379', // green\n  error: '#e06c75',   // red\n  warning: '#e5c07b', // yellow\n  info: '#61afef',    // blue\n  prompt: '#c678dd',  // purple\n  path: '#56b6c2',    // cyan\n  command: '#abb2bf', // white\n  comment: '#5c6370'  // gray\n};\n\nconst LoadingSequence = styled.div`\n  font-family: 'Source Code Pro', monospace;\n  font-size: 1rem;\n  color: ${TerminalColors.command};\n  text-align: left;\n  width: 100%;\n  margin-bottom: 2rem;\n  background: #282c34;\n  padding: 1rem;\n  border-radius: 8px;\n  border: 1px solid #3e4451;\n  height: 400px;\n  overflow-y: auto;\n  position: relative;\n\n  &::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: rgba(171, 178, 191, 0.1);\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: rgba(171, 178, 191, 0.3);\n    border-radius: 4px;\n  }\n`;\n\nconst ProgressText = styled.div`\n  margin: 0.2rem 0;\n  opacity: 0.9;\n  position: relative;\n  padding-left: 1.5rem;\n  line-height: 1.4;\n  color: ${TerminalColors.command};\n\n  &::before {\n    content: '➜';\n    position: absolute;\n    left: 0;\n    color: ${TerminalColors.prompt};\n  }\n\n  span {\n    color: inherit;\n  }\n`;\n\nconst Spinner = styled.div`\n  display: inline-block;\n  margin-right: 8px;\n  width: 1em;\n  height: 1em;\n  position: relative;\n  \n  &::after {\n    content: '⠋';\n    animation: spinnerAnimation 1s steps(10, end) infinite;\n  }\n\n  @keyframes spinnerAnimation {\n    11% { content: '⠙'; }\n    22% { content: '⠹'; }\n    33% { content: '⠸'; }\n    44% { content: '⠼'; }\n    55% { content: '⠴'; }\n    66% { content: '⠦'; }\n    77% { content: '⠧'; }\n    88% { content: '⠇'; }\n    99% { content: '⠏'; }\n  }\n`;\n\nconst LoadingBar = styled.div`\n  font-family: 'Source Code Pro', monospace;\n  color: ${TerminalColors.command};\n  margin: 0.2rem 0;\n  opacity: 0.9;\n  white-space: pre;\n`;\n\nconst ErrorText = styled.div`\n  color: ${TerminalColors.error};\n  margin: 0.2rem 0;\n  padding-left: 1.5rem;\n  opacity: 0.9;\n`;\n\nconst WarningText = styled.div`\n  color: ${TerminalColors.warning};\n  margin: 0.2rem 0;\n  padding-left: 1.5rem;\n  opacity: 0.9;\n`;\n\nconst RetryText = styled.div`\n  color: ${TerminalColors.info};\n  margin: 0.2rem 0;\n  padding-left: 1.5rem;\n  opacity: 0.9;\n`;\n\nconst Cursor = styled.span`\n  display: inline-block;\n  width: 8px;\n  height: 15px;\n  background: #0f0;\n  margin-left: 4px;\n  animation: blink 1s step-end infinite;\n\n  @keyframes blink {\n    50% { opacity: 0; }\n  }\n`;\n\nconst ArtifactDisplay = styled.div`\n  margin-top: 2rem;\n  padding: 2rem;\n  background: rgba(0, 0, 0, 0.5);\n  border-radius: 15px;\n  border: 1px solid rgba(255, 215, 0, 0.2);\n  width: 100%;\n`;\n\nconst ArtifactImage = styled.img`\n  width: 100%;\n  max-width: 400px;\n  height: auto;\n  margin: 2rem auto;\n  display: block;\n  border-radius: 10px;\n  border: 2px solid rgba(128, 0, 255, 0.3);\n`;\n\nconst ArtifactText = styled.div`\n  font-family: 'Creepster', cursive;\n  font-size: 1.2rem;\n  color: #fff;\n  margin: 1rem 0;\n  text-align: center;\n`;\n\nconst packageLoadingStates = [\n  { name: \"quantum-core\", size: \"256MB\" },\n  { name: \"dimensional-bridge\", size: \"512MB\" },\n  { name: \"reality-parser\", size: \"128MB\" },\n  { name: \"multiverse-scanner\", size: \"1GB\" },\n  { name: \"artifact-compiler\", size: \"384MB\" },\n  { name: \"neural-interface\", size: \"768MB\" },\n  { name: \"quantum-stabilizer\", size: \"192MB\" },\n  { name: \"entropy-reducer\", size: \"448MB\" },\n  { name: \"timeline-synchronizer\", size: \"896MB\" },\n  { name: \"void-mapper\", size: \"320MB\" }\n];\n\ninterface ChatResponse {\n  choices: Array<{\n    message: {\n      content: string;\n    };\n  }>;\n}\n\nconst hackingMessages = [\n  \"Initializing quantum breach protocol...\",\n  \"Accessing dimensional gateway...\",\n  \"Bypassing security matrix...\",\n  \"Injecting polymorphic code sequence...\",\n  \"Scanning parallel universes...\",\n  \"Decrypting interdimensional protocols...\",\n  \"Loading quantum encryption keys...\",\n  \"Establishing neural network uplink...\",\n  \"Accessing forbidden database sectors...\",\n  \"Compiling dimensional coordinates...\",\n  \"Installing quantum drivers...\",\n  \"Running security bypass...\",\n  \"Initializing reality distortion field...\",\n  \"Loading dimensional translation matrix...\",\n  \"Accessing forbidden knowledge banks...\",\n  \"Injecting consciousness transfer protocols...\",\n  \"Scanning dimensional frequencies...\",\n  \"Calibrating quantum stabilizers...\",\n  \"Loading artifact manifestation drivers...\",\n  \"Compiling interdimensional data streams...\"\n];\n\nconst installationMessages = [\n  \"Installing quantum visualization drivers...\",\n  \"Downloading artifact materialization modules...\",\n  \"Updating neural pattern recognition...\",\n  \"Installing dimensional calibration tools...\",\n  \"Configuring reality anchors...\",\n  \"Setting up quantum entanglement protocols...\",\n  \"Installing parallel universe scanners...\",\n  \"Updating dimensional drift compensators...\",\n  \"Installing artifact containment systems...\",\n  \"Configuring safety protocol databases...\"\n];\n\nconst processingMessages = [\n  \"Processing quantum fluctuations...\",\n  \"Analyzing dimensional resonance...\",\n  \"Calculating probability matrices...\",\n  \"Stabilizing reality anchors...\",\n  \"Verifying quantum signatures...\",\n  \"Processing temporal data...\",\n  \"Analyzing artifact composition...\",\n  \"Calculating dimensional stability...\",\n  \"Processing quantum entanglement...\",\n  \"Verifying containment parameters...\"\n];\n\nconst generateRandomHex = () => {\n  return Math.random().toString(16).substring(2, 8).toUpperCase();\n};\n\nconst generateRandomPath = () => {\n  const paths = [\n    '/quantum/matrix/',\n    '/dimensional/gateway/',\n    '/neural/network/',\n    '/reality/core/',\n    '/forbidden/knowledge/'\n  ];\n  return paths[Math.floor(Math.random() * paths.length)] + generateRandomHex();\n};\n\nconst loadingSteps = [\n  \"Generating quantum seed\",\n  \"Activating terminal\",\n  \"Hard booting terminal accelerator\",\n  \"Establishing interdimensional connection\",\n  \"Scanning multiverse frequencies\",\n  \"Bypassing quantum firewall\",\n  \"Accessing artifact database\",\n  \"Stabilizing dimensional rift\",\n  \"Verifying artifact integrity\",\n  \"Materializing quantum data\"\n];\n\nconst generateDimensionalCoordinate = () => {\n  const dimension = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n  const number = Math.floor(Math.random() * 1000);\n  const subDimension = Math.floor(Math.random() * 100);\n  return `${dimension}-${number}.${subDimension}`;\n};\n\ninterface PackageState {\n  name: string;\n  size: string;\n  progress: number;\n  speed: string;\n  status: 'downloading' | 'error' | 'retry' | 'warning' | 'success';\n  attempts: number;\n}\n\nconst errorMessages = [\n  \"ERROR: Quantum entanglement desynchronization detected\",\n  \"CRITICAL: Buffer overflow in dimensional matrix\",\n  \"FATAL: Memory corruption in reality anchor\",\n  \"ERROR: Failed to establish neural handshake\",\n  \"CRITICAL: Quantum state collapse imminent\",\n  \"ERROR: Dimensional breach detected in sector\",\n  \"FATAL: Stack overflow in consciousness stream\",\n  \"ERROR: Failed to validate reality signature\",\n  \"CRITICAL: Unauthorized timeline modification detected\",\n  \"FATAL: Neural network cascade failure\"\n];\n\nconst recoveryMessages = [\n  \"Attempting quantum state recovery...\",\n  \"Reinitializing dimensional buffers...\",\n  \"Reconstructing reality matrix...\",\n  \"Emergency protocol initiated...\",\n  \"Restoring quantum coherence...\",\n  \"Realigning dimensional vectors...\",\n  \"Rebuilding neural pathways...\",\n  \"Stabilizing quantum field...\",\n  \"Repairing timeline integrity...\",\n  \"Engaging backup systems...\"\n];\n\nexport const InteractiveFeatures: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [loadingProgress, setLoadingProgress] = useState<string[]>([]);\n  const [hackingOutput, setHackingOutput] = useState<string[]>([]);\n  const [artifactData, setArtifactData] = useState<{\n    prediction: string;\n    survivalTip: string;\n    imageUrl: string;\n  } | null>(null);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [installProgress, setInstallProgress] = useState<{ message: string; progress: number }[]>([]);\n  const [packageLoading, setPackageLoading] = useState<{\n    name: string;\n    progress: number;\n    size: string;\n    speed: string;\n  } | null>(null);\n  const [packageStates, setPackageStates] = useState<PackageState[]>([]);\n  const [spinnerIndex, setSpinnerIndex] = useState(0);\n\n  useEffect(() => {\n    if (loading && currentStep < loadingSteps.length) {\n      // Main loading step\n      const timer = setTimeout(() => {\n        const coordinate = generateDimensionalCoordinate();\n        const stepText = currentStep === 1 \n          ? `${loadingSteps[currentStep]} ${coordinate}`\n          : loadingSteps[currentStep];\n        \n        setLoadingProgress(prev => [...prev, `${stepText}...${(currentStep + 1) * 10}%`]);\n        setCurrentStep(prev => prev + 1);\n\n        if (currentStep === loadingSteps.length - 1) {\n          setIsGenerating(true);\n          generateArtifact();\n        }\n      }, 1000);\n\n      // Random hacking messages with errors\n      const hackingTimer = setInterval(() => {\n        const shouldError = Math.random() < 0.3;\n        const shouldWarn = Math.random() < 0.2;\n        const shouldCriticalError = Math.random() < 0.1;\n\n        if (shouldCriticalError) {\n          setHackingOutput(prev => [\n            ...prev,\n            `<span style=\"color: ${TerminalColors.error}\">[FATAL] ${errorMessages[Math.floor(Math.random() * errorMessages.length)]}</span>`,\n            `<span style=\"color: ${TerminalColors.warning}\">[SYSTEM] Initiating emergency recovery sequence...</span>`,\n            `<span style=\"color: ${TerminalColors.info}\">[RECOVERY] ${recoveryMessages[Math.floor(Math.random() * recoveryMessages.length)]}</span>`\n          ]);\n        } else if (shouldError) {\n          setHackingOutput(prev => [\n            ...prev,\n            `<span style=\"color: ${TerminalColors.error}\">[ERROR] Memory corruption at 0x${generateRandomHex()}</span>`,\n            `<span style=\"color: ${TerminalColors.warning}\">[SYSTEM] Attempting memory reallocation...</span>`\n          ]);\n        } else if (shouldWarn) {\n          setHackingOutput(prev => [\n            ...prev,\n            `<span style=\"color: ${TerminalColors.warning}\">[WARNING] Unstable quantum signature detected in sector 0x${generateRandomHex()}</span>`\n          ]);\n        } else {\n          const randomMessage = hackingMessages[Math.floor(Math.random() * hackingMessages.length)];\n          const path = generateRandomPath();\n          setHackingOutput(prev => [\n            ...prev,\n            `<span style=\"color: ${TerminalColors.command}\">[${path}] ${randomMessage}</span>`\n          ]);\n        }\n      }, 200);\n\n      return () => {\n        clearTimeout(timer);\n        clearInterval(hackingTimer);\n      };\n    }\n  }, [loading, currentStep]);\n\n  // Keep terminal active during generation\n  useEffect(() => {\n    if (isGenerating) {\n      // Installation progress\n      const installTimer = setInterval(() => {\n        const message = installationMessages[Math.floor(Math.random() * installationMessages.length)];\n        const progress = Math.floor(Math.random() * 100);\n        setInstallProgress(prev => [...prev.slice(-5), { message, progress }]);\n      }, 800);\n\n      // Processing messages\n      const processTimer = setInterval(() => {\n        const message = processingMessages[Math.floor(Math.random() * processingMessages.length)];\n        setHackingOutput(prev => [...prev, `[PROCESS] ${message}`].slice(-20));\n      }, 300);\n\n      return () => {\n        clearInterval(installTimer);\n        clearInterval(processTimer);\n      };\n    }\n  }, [isGenerating]);\n\n  // Add package loading effect\n  useEffect(() => {\n    if (isGenerating) {\n      let currentPackageIndex = 0;\n\n      const simulatePackageInstall = () => {\n        const pkg = packageLoadingStates[currentPackageIndex];\n        const speed = `${Math.floor(Math.random() * 100) + 50}MB/s`;\n\n        setPackageStates(prev => {\n          const newStates = [...prev];\n          const existingPkg = newStates.find(p => p.name === pkg.name);\n          \n          if (existingPkg) {\n            existingPkg.status = 'downloading';\n            existingPkg.progress += Math.floor(Math.random() * 10) + 5;\n            existingPkg.speed = speed;\n\n            if (existingPkg.progress >= 100) {\n              existingPkg.status = 'success';\n              existingPkg.progress = 100;\n              setHackingOutput(prev => [\n                ...prev,\n                `<span style=\"color: ${TerminalColors.success}\">[SUCCESS] ${pkg.name} successfully integrated into quantum matrix</span>`\n              ]);\n              currentPackageIndex = (currentPackageIndex + 1) % packageLoadingStates.length;\n            }\n          } else {\n            newStates.push({\n              name: pkg.name,\n              size: pkg.size,\n              progress: 0,\n              speed,\n              status: 'downloading',\n              attempts: 1\n            });\n            setHackingOutput(prev => [\n              ...prev,\n              `<span style=\"color: ${TerminalColors.info}\">[INIT] Starting installation of ${pkg.name} (${pkg.size})</span>`\n            ]);\n          }\n          return newStates;\n        });\n      };\n\n      const packageTimer = setInterval(simulatePackageInstall, 150);\n      return () => clearInterval(packageTimer);\n    } else {\n      setPackageStates([]);\n    }\n  }, [isGenerating]);\n\n  const makeOpenAIRequest = async (messages: Array<{ role: string; content: string }>, maxTokens: number) => {\n    const apiKey = config.openaiApiKey;\n    \n    if (!apiKey) {\n      throw new Error('OpenAI API key is not configured');\n    }\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages,\n          max_tokens: maxTokens\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error('OpenAI API Error:', {\n          status: response.status,\n          statusText: response.statusText,\n          error: errorData\n        });\n        throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data: ChatResponse = await response.json();\n      return data.choices[0]?.message?.content || '';\n    } catch (error) {\n      console.error('Request error:', error);\n      throw error;\n    }\n  };\n\n  const generateImage = async (prompt: string) => {\n    const apiKey = config.openaiApiKey;\n    \n    if (!apiKey) {\n      throw new Error('OpenAI API key is not configured');\n    }\n\n    const enhancedPrompt = `Create a highly detailed, Rick and Morty style interdimensional artifact. The artifact should be a strange, alien device or object with glowing elements and intricate mechanical details. Style: Vibrant colors, sci-fi aesthetic, detailed mechanical parts. Important: The image must not contain any text, numbers, symbols, or writing of any kind. The image should focus purely on the visual appearance of the artifact without any textual elements.`;\n\n    const negativePrompt = \"text, writing, numbers, symbols, letters, characters, words, labels, signs, watermarks, signatures, logos\";\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/images/generations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: \"dall-e-3\",\n          prompt: enhancedPrompt,\n          n: 1,\n          size: \"1024x1024\",\n          quality: \"hd\",\n          style: \"vivid\"\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Image generation failed: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.data[0].url;\n    } catch (error) {\n      console.error('Error generating image:', error);\n      throw error;\n    }\n  };\n\n  const generateArtifact = async () => {\n    try {\n      const [prediction, survivalTip] = await Promise.all([\n        makeOpenAIRequest([{\n          role: \"system\",\n          content: \"You are an interdimensional artifact analyzer providing quirky, Rick and Morty-style analysis. Describe a weird, unique interdimensional artifact that could exist in the Rick and Morty universe. Keep responses concise (2-3 sentences), entertaining, and mysterious. Focus on the physical appearance and strange properties of the artifact.\"\n        }, {\n          role: \"user\",\n          content: \"Generate a random interdimensional artifact analysis or prediction.\"\n        }], 100),\n        makeOpenAIRequest([{\n          role: \"system\",\n          content: \"You are an advanced AI providing survival tips related to interdimensional artifacts. Include specific warnings about handling the artifact. Keep it in the style of Rick and Morty.\"\n        }, {\n          role: \"user\",\n          content: \"Generate a survival tip for handling an interdimensional artifact.\"\n        }], 150)\n      ]);\n\n      const imageUrl = await generateImage(prediction);\n\n      setArtifactData({\n        prediction,\n        survivalTip,\n        imageUrl\n      });\n    } catch (error) {\n      console.error('Error generating artifact:', error);\n      setArtifactData({\n        prediction: 'Error connecting to the multiverse. Please try again.',\n        survivalTip: 'Connection lost. Unable to retrieve safety protocols.',\n        imageUrl: ''\n      });\n    } finally {\n      setIsGenerating(false);\n      setLoading(false);\n    }\n  };\n\n  const startGeneration = () => {\n    setLoading(true);\n    setCurrentStep(0);\n    setLoadingProgress([]);\n    setArtifactData(null);\n  };\n\n  const renderPackageStatus = (pkg: PackageState) => {\n    switch (pkg.status) {\n      case 'error':\n        return (\n          <>\n            <ErrorText>✗ Failed to install {pkg.name} (Attempt {pkg.attempts})</ErrorText>\n            <RetryText>↺ Retrying installation... [Quantum stability: {Math.floor(Math.random() * 40 + 60)}%]</RetryText>\n            <ProgressText style={{ color: TerminalColors.error }}>\n              └─ Error at memory address 0x{generateRandomHex()}\n            </ProgressText>\n          </>\n        );\n      case 'warning':\n        return (\n          <>\n            <WarningText>⚠ Unstable quantum fluctuations detected in {pkg.name}</WarningText>\n            <ProgressText style={{ color: TerminalColors.warning }}>\n              └─ Applying quantum stabilizers... [{'.'.repeat(Math.floor(Math.random() * 20))}]\n            </ProgressText>\n          </>\n        );\n      case 'success':\n        return (\n          <>\n            <ProgressText style={{ color: TerminalColors.success }}>\n              ✓ Successfully installed {pkg.name} [{'.'.repeat(20)}] 100%\n            </ProgressText>\n            <ProgressText style={{ color: TerminalColors.comment }}>\n              └─ Quantum signature verified: 0x{generateRandomHex()}\n            </ProgressText>\n          </>\n        );\n      default:\n        return (\n          <LoadingBar>\n            <Spinner />\n            Installing {pkg.name} [{'.'.repeat(Math.floor(pkg.progress/5))}] {pkg.progress}%\n            <div style={{ paddingLeft: '24px', fontSize: '0.9em', opacity: 0.7, color: TerminalColors.comment }}>\n              Size: {pkg.size} | Speed: {pkg.speed} | Memory: 0x{generateRandomHex()}\n            </div>\n          </LoadingBar>\n        );\n    }\n  };\n\n  return (\n    <Section>\n      <FeaturesContainer>\n        <QuantumTerminal>\n          {!loading && !artifactData && (\n            <MainButton onClick={startGeneration}>\n              Generate Quantum Squanch Artifact\n            </MainButton>\n          )}\n\n          {(loading || isGenerating) && (\n            <LoadingSequence>\n              {loadingProgress.map((step, index) => (\n                <ProgressText key={`progress-${index}`}>{step}</ProgressText>\n              ))}\n              {isGenerating && (\n                <>\n                  {packageStates.map((pkg, index) => (\n                    <React.Fragment key={`pkg-${index}`}>\n                      {renderPackageStatus(pkg)}\n                    </React.Fragment>\n                  ))}\n                </>\n              )}\n              {hackingOutput.map((output, index) => (\n                <ProgressText \n                  key={`hacking-${index}`} \n                  dangerouslySetInnerHTML={{ __html: output }}\n                />\n              ))}\n              <Cursor />\n            </LoadingSequence>\n          )}\n\n          {artifactData && !loading && !isGenerating && (\n            <ArtifactDisplay>\n              <ArtifactText>{artifactData.prediction}</ArtifactText>\n              <ArtifactImage src={artifactData.imageUrl} alt=\"Quantum Artifact\" />\n              <ArtifactText>⚠ Safety Protocol:</ArtifactText>\n              <ArtifactText>{artifactData.survivalTip}</ArtifactText>\n            </ArtifactDisplay>\n          )}\n        </QuantumTerminal>\n      </FeaturesContainer>\n    </Section>\n  );\n}; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,IAAIC,SAAS,QAAa,mBAAmB;AAC1D,SAASC,MAAM,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnC,MAAMC,cAAc,GAAGN,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMO,OAAO,GAAGR,MAAM,CAACS,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiBF,cAAc;AAC/B;AACA;AACA,CAAC;AAACG,EAAA,GApBIF,OAAO;AAsBb,MAAMG,iBAAiB,GAAGX,MAAM,CAACY,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAVIF,iBAAiB;AAYvB,MAAMG,eAAe,GAAGd,MAAM,CAACY,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GAfID,eAAe;AAiBrB,MAAME,SAAS,GAAGf,SAAS;AAC3B;AACA;AACA;AACA,CAAC;AAED,MAAMgB,UAAU,GAAGjB,MAAM,CAACkB,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeF,SAAS;AACxB;AACA;AACA;AACA,iBAAiBA,SAAS;AAC1B;AACA,CAAC;AAACG,GAAA,GAlBIF,UAAU;AAoBhB,MAAMG,cAAc,GAAG;EACrBC,OAAO,EAAE,SAAS;EAAE;EACpBC,KAAK,EAAE,SAAS;EAAI;EACpBC,OAAO,EAAE,SAAS;EAAE;EACpBC,IAAI,EAAE,SAAS;EAAK;EACpBC,MAAM,EAAE,SAAS;EAAG;EACpBC,IAAI,EAAE,SAAS;EAAK;EACpBC,OAAO,EAAE,SAAS;EAAE;EACpBC,OAAO,EAAE,SAAS,CAAE;AACtB,CAAC;AAED,MAAMC,eAAe,GAAG7B,MAAM,CAACY,GAAG;AAClC;AACA;AACA,WAAWQ,cAAc,CAACO,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GA3BID,eAAe;AA6BrB,MAAME,YAAY,GAAG/B,MAAM,CAACY,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA,WAAWQ,cAAc,CAACO,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA,aAAaP,cAAc,CAACK,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA,CAAC;AAACO,GAAA,GAlBID,YAAY;AAoBlB,MAAME,OAAO,GAAGjC,MAAM,CAACY,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACsB,GAAA,GAvBID,OAAO;AAyBb,MAAME,UAAU,GAAGnC,MAAM,CAACY,GAAG;AAC7B;AACA,WAAWQ,cAAc,CAACO,OAAO;AACjC;AACA;AACA;AACA,CAAC;AAACS,GAAA,GANID,UAAU;AAQhB,MAAME,SAAS,GAAGrC,MAAM,CAACY,GAAG;AAC5B,WAAWQ,cAAc,CAACE,KAAK;AAC/B;AACA;AACA;AACA,CAAC;AAACgB,GAAA,GALID,SAAS;AAOf,MAAME,WAAW,GAAGvC,MAAM,CAACY,GAAG;AAC9B,WAAWQ,cAAc,CAACG,OAAO;AACjC;AACA;AACA;AACA,CAAC;AAACiB,IAAA,GALID,WAAW;AAOjB,MAAME,SAAS,GAAGzC,MAAM,CAACY,GAAG;AAC5B,WAAWQ,cAAc,CAACI,IAAI;AAC9B;AACA;AACA;AACA,CAAC;AAACkB,IAAA,GALID,SAAS;AAOf,MAAME,MAAM,GAAG3C,MAAM,CAAC4C,IAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,IAAA,GAXI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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}