{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/InteractiveFeatures.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { config } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst noiseAnimation = keyframes`\n  0% { transform: translate(0, 0); }\n  10% { transform: translate(-5%, -5%); }\n  20% { transform: translate(-10%, 5%); }\n  30% { transform: translate(5%, -10%); }\n  40% { transform: translate(-5%, 15%); }\n  50% { transform: translate(-10%, 5%); }\n  60% { transform: translate(15%, 0); }\n  70% { transform: translate(0, 10%); }\n  80% { transform: translate(-15%, 0); }\n  90% { transform: translate(10%, 5%); }\n  100% { transform: translate(5%, 0); }\n`;\nconst Section = styled.section`\n  background-color: black;\n  position: relative;\n  overflow: hidden;\n  min-height: 100vh;\n  margin-top: 0;\n  padding: 0;\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: -150%;\n    left: -150%;\n    width: 400%;\n    height: 400%;\n    background-image: url(\"data:image/svg+xml,%3Csvg viewBox='0 0 3000 3000' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.6' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E\");\n    opacity: 0.12;\n    animation: ${noiseAnimation} 1s steps(2) infinite;\n    pointer-events: none;\n  }\n`;\n_c = Section;\nconst FeaturesContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 6rem 2rem;\n  width: 100%;\n  max-width: 1400px;\n  margin: 0 auto;\n  position: relative;\n  z-index: 1;\n`;\n_c2 = FeaturesContainer;\nconst QuantumTerminal = styled.div`\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(255, 215, 0, 0.3);\n  border-radius: 15px;\n  padding: 3rem;\n  color: white;\n  backdrop-filter: blur(10px);\n  box-shadow: 0 0 20px rgba(255, 215, 0, 0.1);\n  width: 100%;\n  max-width: 800px;\n  min-height: 400px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n_c3 = QuantumTerminal;\nconst glowPulse = keyframes`\n  0% { box-shadow: 0 0 20px rgba(128, 0, 255, 0.4); }\n  50% { box-shadow: 0 0 40px rgba(128, 0, 255, 0.6); }\n  100% { box-shadow: 0 0 20px rgba(128, 0, 255, 0.4); }\n`;\nconst MainButton = styled.button`\n  background: linear-gradient(45deg, #4a0080, #8000ff);\n  color: white;\n  border: none;\n  padding: 1.5rem 3rem;\n  border-radius: 30px;\n  font-size: 1.5rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  font-family: 'Creepster', cursive;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n  animation: ${glowPulse} 2s infinite;\n\n  &:hover {\n    transform: scale(1.05);\n    animation: ${glowPulse} 1s infinite;\n  }\n`;\n_c4 = MainButton;\nconst LoadingSequence = styled.div`\n  font-family: 'Source Code Pro', monospace;\n  font-size: 1rem;\n  color: #0f0;\n  text-align: left;\n  width: 100%;\n  margin-bottom: 2rem;\n  background: rgba(0, 0, 0, 0.9);\n  padding: 1rem;\n  border-radius: 8px;\n  border: 1px solid #0f0;\n  height: 400px;\n  overflow-y: auto;\n  position: relative;\n\n  &::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: rgba(0, 255, 0, 0.1);\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: rgba(0, 255, 0, 0.3);\n    border-radius: 4px;\n  }\n`;\n_c5 = LoadingSequence;\nconst ProgressText = styled.div`\n  margin: 0.2rem 0;\n  opacity: 0.8;\n  position: relative;\n  padding-left: 1.5rem;\n  line-height: 1.4;\n\n  &::before {\n    content: '>';\n    position: absolute;\n    left: 0;\n    color: #0f0;\n  }\n`;\n_c6 = ProgressText;\nconst Cursor = styled.span`\n  display: inline-block;\n  width: 8px;\n  height: 15px;\n  background: #0f0;\n  margin-left: 4px;\n  animation: blink 1s step-end infinite;\n\n  @keyframes blink {\n    50% { opacity: 0; }\n  }\n`;\n_c7 = Cursor;\nconst ArtifactDisplay = styled.div`\n  margin-top: 2rem;\n  padding: 2rem;\n  background: rgba(0, 0, 0, 0.5);\n  border-radius: 15px;\n  border: 1px solid rgba(255, 215, 0, 0.2);\n  width: 100%;\n`;\n_c8 = ArtifactDisplay;\nconst ArtifactImage = styled.img`\n  width: 100%;\n  max-width: 400px;\n  height: auto;\n  margin: 2rem auto;\n  display: block;\n  border-radius: 10px;\n  border: 2px solid rgba(128, 0, 255, 0.3);\n`;\n_c9 = ArtifactImage;\nconst ArtifactText = styled.div`\n  font-family: 'Creepster', cursive;\n  font-size: 1.2rem;\n  color: #fff;\n  margin: 1rem 0;\n  text-align: center;\n`;\n_c10 = ArtifactText;\nconst hackingMessages = [\"Initializing quantum breach protocol...\", \"Accessing dimensional gateway...\", \"Bypassing security matrix...\", \"Injecting polymorphic code sequence...\", \"Scanning parallel universes...\", \"Decrypting interdimensional protocols...\", \"Loading quantum encryption keys...\", \"Establishing neural network uplink...\", \"Accessing forbidden database sectors...\", \"Compiling dimensional coordinates...\", \"Installing quantum drivers...\", \"Running security bypass...\", \"Initializing reality distortion field...\", \"Loading dimensional translation matrix...\", \"Accessing forbidden knowledge banks...\", \"Injecting consciousness transfer protocols...\", \"Scanning dimensional frequencies...\", \"Calibrating quantum stabilizers...\", \"Loading artifact manifestation drivers...\", \"Compiling interdimensional data streams...\"];\nconst generateRandomHex = () => {\n  return Math.random().toString(16).substring(2, 8).toUpperCase();\n};\nconst generateRandomPath = () => {\n  const paths = ['/quantum/matrix/', '/dimensional/gateway/', '/neural/network/', '/reality/core/', '/forbidden/knowledge/'];\n  return paths[Math.floor(Math.random() * paths.length)] + generateRandomHex();\n};\nconst loadingSteps = [\"Generating quantum seed\", \"Activating terminal\", \"Hard booting terminal accelerator\", \"Establishing interdimensional connection\", \"Scanning multiverse frequencies\", \"Bypassing quantum firewall\", \"Accessing artifact database\", \"Stabilizing dimensional rift\", \"Verifying artifact integrity\", \"Materializing quantum data\"];\nconst generateDimensionalCoordinate = () => {\n  const dimension = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n  const number = Math.floor(Math.random() * 1000);\n  const subDimension = Math.floor(Math.random() * 100);\n  return `${dimension}-${number}.${subDimension}`;\n};\nexport const InteractiveFeatures = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [loadingProgress, setLoadingProgress] = useState([]);\n  const [hackingOutput, setHackingOutput] = useState([]);\n  const [artifactData, setArtifactData] = useState(null);\n  useEffect(() => {\n    if (loading && currentStep < loadingSteps.length) {\n      // Main loading step\n      const timer = setTimeout(() => {\n        const coordinate = generateDimensionalCoordinate();\n        const stepText = currentStep === 1 ? `${loadingSteps[currentStep]} ${coordinate}` : loadingSteps[currentStep];\n        setLoadingProgress(prev => [...prev, `${stepText}...${(currentStep + 1) * 10}%`]);\n        setCurrentStep(prev => prev + 1);\n        if (currentStep === loadingSteps.length - 1) {\n          generateArtifact();\n        }\n      }, 1000);\n\n      // Random hacking messages\n      const hackingTimer = setInterval(() => {\n        const randomMessage = hackingMessages[Math.floor(Math.random() * hackingMessages.length)];\n        const path = generateRandomPath();\n        setHackingOutput(prev => [...prev, `[${path}] ${randomMessage}`].slice(-20));\n      }, 200);\n      return () => {\n        clearTimeout(timer);\n        clearInterval(hackingTimer);\n      };\n    }\n  }, [loading, currentStep]);\n  const makeOpenAIRequest = async (messages, maxTokens) => {\n    const apiKey = config.openaiApiKey;\n    if (!apiKey) {\n      throw new Error('OpenAI API key is not configured');\n    }\n    try {\n      var _data$choices$, _data$choices$$messag;\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages,\n          max_tokens: maxTokens\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error('OpenAI API Error:', {\n          status: response.status,\n          statusText: response.statusText,\n          error: errorData\n        });\n        throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      return ((_data$choices$ = data.choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content) || '';\n    } catch (error) {\n      console.error('Request error:', error);\n      throw error;\n    }\n  };\n  const generateImage = async prompt => {\n    const apiKey = config.openaiApiKey;\n    if (!apiKey) {\n      throw new Error('OpenAI API key is not configured');\n    }\n    try {\n      const response = await fetch('https://api.openai.com/v1/images/generations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: \"dall-e-3\",\n          prompt: `A highly detailed Rick and Morty style illustration of an interdimensional artifact: ${prompt}. The art style should match the show perfectly, with vibrant colors and sci-fi elements. The image should contain NO text or writing of any kind. Focus on creating a visually striking object with intricate details, glowing elements, and otherworldly features.`,\n          n: 1,\n          size: \"1024x1024\",\n          quality: \"standard\",\n          style: \"vivid\"\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error('OpenAI Image Generation Error:', {\n          status: response.status,\n          statusText: response.statusText,\n          error: errorData\n        });\n        throw new Error(`OpenAI Image Generation error: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data.data[0].url;\n    } catch (error) {\n      console.error('Image generation error:', error);\n      throw error;\n    }\n  };\n  const generateArtifact = async () => {\n    try {\n      // First, get the artifact description and safety tip\n      const [prediction, survivalTip] = await Promise.all([makeOpenAIRequest([{\n        role: \"system\",\n        content: \"You are an interdimensional artifact analyzer providing quirky, Rick and Morty-style analysis. Describe a weird, unique interdimensional artifact that could exist in the Rick and Morty universe. Keep responses concise (2-3 sentences), entertaining, and mysterious. Focus on the physical appearance and strange properties of the artifact.\"\n      }, {\n        role: \"user\",\n        content: \"Generate a random interdimensional artifact analysis or prediction.\"\n      }], 100), makeOpenAIRequest([{\n        role: \"system\",\n        content: \"You are an advanced AI providing survival tips related to interdimensional artifacts. Include specific warnings about handling the artifact. Keep it in the style of Rick and Morty.\"\n      }, {\n        role: \"user\",\n        content: \"Generate a survival tip for handling an interdimensional artifact.\"\n      }], 150)]);\n\n      // Then, use the prediction to generate a matching image\n      const imageUrl = await generateImage(prediction);\n      setArtifactData({\n        prediction,\n        survivalTip,\n        imageUrl\n      });\n      setLoading(false);\n    } catch (error) {\n      console.error('Error generating artifact:', error);\n      setArtifactData({\n        prediction: 'Error connecting to the multiverse. Please try again.',\n        survivalTip: 'Connection lost. Unable to retrieve safety protocols.',\n        imageUrl: ''\n      });\n      setLoading(false);\n    }\n  };\n  const startGeneration = () => {\n    setLoading(true);\n    setCurrentStep(0);\n    setLoadingProgress([]);\n    setArtifactData(null);\n  };\n  return /*#__PURE__*/_jsxDEV(Section, {\n    children: /*#__PURE__*/_jsxDEV(FeaturesContainer, {\n      children: /*#__PURE__*/_jsxDEV(QuantumTerminal, {\n        children: [!loading && !artifactData && /*#__PURE__*/_jsxDEV(MainButton, {\n          onClick: startGeneration,\n          children: \"Generate Quantum Squanch Artifact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 13\n        }, this), loading && /*#__PURE__*/_jsxDEV(LoadingSequence, {\n          children: [loadingProgress.map((step, index) => /*#__PURE__*/_jsxDEV(ProgressText, {\n            children: step\n          }, `progress-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 17\n          }, this)), hackingOutput.map((output, index) => /*#__PURE__*/_jsxDEV(ProgressText, {\n            style: {\n              color: '#00ff00',\n              opacity: 0.6\n            },\n            children: output\n          }, `hacking-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(Cursor, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 13\n        }, this), artifactData && /*#__PURE__*/_jsxDEV(ArtifactDisplay, {\n          children: [/*#__PURE__*/_jsxDEV(ArtifactText, {\n            children: artifactData.prediction\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ArtifactImage, {\n            src: artifactData.imageUrl,\n            alt: \"Quantum Artifact\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ArtifactText, {\n            children: \"\\u26A0 Safety Protocol:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ArtifactText, {\n            children: artifactData.survivalTip\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 417,\n    columnNumber: 5\n  }, this);\n};\n_s(InteractiveFeatures, \"Inyhbj95rDCd2wMwiE2lYSJcr3s=\");\n_c11 = InteractiveFeatures;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"Section\");\n$RefreshReg$(_c2, \"FeaturesContainer\");\n$RefreshReg$(_c3, \"QuantumTerminal\");\n$RefreshReg$(_c4, \"MainButton\");\n$RefreshReg$(_c5, \"LoadingSequence\");\n$RefreshReg$(_c6, \"ProgressText\");\n$RefreshReg$(_c7, \"Cursor\");\n$RefreshReg$(_c8, \"ArtifactDisplay\");\n$RefreshReg$(_c9, \"ArtifactImage\");\n$RefreshReg$(_c10, \"ArtifactText\");\n$RefreshReg$(_c11, \"InteractiveFeatures\");","map":{"version":3,"names":["React","useState","useEffect","styled","keyframes","config","jsxDEV","_jsxDEV","noiseAnimation","Section","section","_c","FeaturesContainer","div","_c2","QuantumTerminal","_c3","glowPulse","MainButton","button","_c4","LoadingSequence","_c5","ProgressText","_c6","Cursor","span","_c7","ArtifactDisplay","_c8","ArtifactImage","img","_c9","ArtifactText","_c10","hackingMessages","generateRandomHex","Math","random","toString","substring","toUpperCase","generateRandomPath","paths","floor","length","loadingSteps","generateDimensionalCoordinate","dimension","String","fromCharCode","number","subDimension","InteractiveFeatures","_s","loading","setLoading","currentStep","setCurrentStep","loadingProgress","setLoadingProgress","hackingOutput","setHackingOutput","artifactData","setArtifactData","timer","setTimeout","coordinate","stepText","prev","generateArtifact","hackingTimer","setInterval","randomMessage","path","slice","clearTimeout","clearInterval","makeOpenAIRequest","messages","maxTokens","apiKey","openaiApiKey","Error","_data$choices$","_data$choices$$messag","response","fetch","method","headers","body","JSON","stringify","model","max_tokens","ok","errorData","text","console","error","status","statusText","data","json","choices","message","content","generateImage","prompt","n","size","quality","style","url","prediction","survivalTip","Promise","all","role","imageUrl","startGeneration","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","step","index","output","color","opacity","src","alt","_c11","$RefreshReg$"],"sources":["/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/InteractiveFeatures.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { config } from '../config';\n\nconst noiseAnimation = keyframes`\n  0% { transform: translate(0, 0); }\n  10% { transform: translate(-5%, -5%); }\n  20% { transform: translate(-10%, 5%); }\n  30% { transform: translate(5%, -10%); }\n  40% { transform: translate(-5%, 15%); }\n  50% { transform: translate(-10%, 5%); }\n  60% { transform: translate(15%, 0); }\n  70% { transform: translate(0, 10%); }\n  80% { transform: translate(-15%, 0); }\n  90% { transform: translate(10%, 5%); }\n  100% { transform: translate(5%, 0); }\n`;\n\nconst Section = styled.section`\n  background-color: black;\n  position: relative;\n  overflow: hidden;\n  min-height: 100vh;\n  margin-top: 0;\n  padding: 0;\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: -150%;\n    left: -150%;\n    width: 400%;\n    height: 400%;\n    background-image: url(\"data:image/svg+xml,%3Csvg viewBox='0 0 3000 3000' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.6' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E\");\n    opacity: 0.12;\n    animation: ${noiseAnimation} 1s steps(2) infinite;\n    pointer-events: none;\n  }\n`;\n\nconst FeaturesContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 6rem 2rem;\n  width: 100%;\n  max-width: 1400px;\n  margin: 0 auto;\n  position: relative;\n  z-index: 1;\n`;\n\nconst QuantumTerminal = styled.div`\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(255, 215, 0, 0.3);\n  border-radius: 15px;\n  padding: 3rem;\n  color: white;\n  backdrop-filter: blur(10px);\n  box-shadow: 0 0 20px rgba(255, 215, 0, 0.1);\n  width: 100%;\n  max-width: 800px;\n  min-height: 400px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst glowPulse = keyframes`\n  0% { box-shadow: 0 0 20px rgba(128, 0, 255, 0.4); }\n  50% { box-shadow: 0 0 40px rgba(128, 0, 255, 0.6); }\n  100% { box-shadow: 0 0 20px rgba(128, 0, 255, 0.4); }\n`;\n\nconst MainButton = styled.button`\n  background: linear-gradient(45deg, #4a0080, #8000ff);\n  color: white;\n  border: none;\n  padding: 1.5rem 3rem;\n  border-radius: 30px;\n  font-size: 1.5rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  font-family: 'Creepster', cursive;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n  animation: ${glowPulse} 2s infinite;\n\n  &:hover {\n    transform: scale(1.05);\n    animation: ${glowPulse} 1s infinite;\n  }\n`;\n\nconst LoadingSequence = styled.div`\n  font-family: 'Source Code Pro', monospace;\n  font-size: 1rem;\n  color: #0f0;\n  text-align: left;\n  width: 100%;\n  margin-bottom: 2rem;\n  background: rgba(0, 0, 0, 0.9);\n  padding: 1rem;\n  border-radius: 8px;\n  border: 1px solid #0f0;\n  height: 400px;\n  overflow-y: auto;\n  position: relative;\n\n  &::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: rgba(0, 255, 0, 0.1);\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: rgba(0, 255, 0, 0.3);\n    border-radius: 4px;\n  }\n`;\n\nconst ProgressText = styled.div`\n  margin: 0.2rem 0;\n  opacity: 0.8;\n  position: relative;\n  padding-left: 1.5rem;\n  line-height: 1.4;\n\n  &::before {\n    content: '>';\n    position: absolute;\n    left: 0;\n    color: #0f0;\n  }\n`;\n\nconst Cursor = styled.span`\n  display: inline-block;\n  width: 8px;\n  height: 15px;\n  background: #0f0;\n  margin-left: 4px;\n  animation: blink 1s step-end infinite;\n\n  @keyframes blink {\n    50% { opacity: 0; }\n  }\n`;\n\nconst ArtifactDisplay = styled.div`\n  margin-top: 2rem;\n  padding: 2rem;\n  background: rgba(0, 0, 0, 0.5);\n  border-radius: 15px;\n  border: 1px solid rgba(255, 215, 0, 0.2);\n  width: 100%;\n`;\n\nconst ArtifactImage = styled.img`\n  width: 100%;\n  max-width: 400px;\n  height: auto;\n  margin: 2rem auto;\n  display: block;\n  border-radius: 10px;\n  border: 2px solid rgba(128, 0, 255, 0.3);\n`;\n\nconst ArtifactText = styled.div`\n  font-family: 'Creepster', cursive;\n  font-size: 1.2rem;\n  color: #fff;\n  margin: 1rem 0;\n  text-align: center;\n`;\n\ninterface ChatResponse {\n  choices: Array<{\n    message: {\n      content: string;\n    };\n  }>;\n}\n\nconst hackingMessages = [\n  \"Initializing quantum breach protocol...\",\n  \"Accessing dimensional gateway...\",\n  \"Bypassing security matrix...\",\n  \"Injecting polymorphic code sequence...\",\n  \"Scanning parallel universes...\",\n  \"Decrypting interdimensional protocols...\",\n  \"Loading quantum encryption keys...\",\n  \"Establishing neural network uplink...\",\n  \"Accessing forbidden database sectors...\",\n  \"Compiling dimensional coordinates...\",\n  \"Installing quantum drivers...\",\n  \"Running security bypass...\",\n  \"Initializing reality distortion field...\",\n  \"Loading dimensional translation matrix...\",\n  \"Accessing forbidden knowledge banks...\",\n  \"Injecting consciousness transfer protocols...\",\n  \"Scanning dimensional frequencies...\",\n  \"Calibrating quantum stabilizers...\",\n  \"Loading artifact manifestation drivers...\",\n  \"Compiling interdimensional data streams...\"\n];\n\nconst generateRandomHex = () => {\n  return Math.random().toString(16).substring(2, 8).toUpperCase();\n};\n\nconst generateRandomPath = () => {\n  const paths = [\n    '/quantum/matrix/',\n    '/dimensional/gateway/',\n    '/neural/network/',\n    '/reality/core/',\n    '/forbidden/knowledge/'\n  ];\n  return paths[Math.floor(Math.random() * paths.length)] + generateRandomHex();\n};\n\nconst loadingSteps = [\n  \"Generating quantum seed\",\n  \"Activating terminal\",\n  \"Hard booting terminal accelerator\",\n  \"Establishing interdimensional connection\",\n  \"Scanning multiverse frequencies\",\n  \"Bypassing quantum firewall\",\n  \"Accessing artifact database\",\n  \"Stabilizing dimensional rift\",\n  \"Verifying artifact integrity\",\n  \"Materializing quantum data\"\n];\n\nconst generateDimensionalCoordinate = () => {\n  const dimension = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n  const number = Math.floor(Math.random() * 1000);\n  const subDimension = Math.floor(Math.random() * 100);\n  return `${dimension}-${number}.${subDimension}`;\n};\n\nexport const InteractiveFeatures: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [loadingProgress, setLoadingProgress] = useState<string[]>([]);\n  const [hackingOutput, setHackingOutput] = useState<string[]>([]);\n  const [artifactData, setArtifactData] = useState<{\n    prediction: string;\n    survivalTip: string;\n    imageUrl: string;\n  } | null>(null);\n\n  useEffect(() => {\n    if (loading && currentStep < loadingSteps.length) {\n      // Main loading step\n      const timer = setTimeout(() => {\n        const coordinate = generateDimensionalCoordinate();\n        const stepText = currentStep === 1 \n          ? `${loadingSteps[currentStep]} ${coordinate}`\n          : loadingSteps[currentStep];\n        \n        setLoadingProgress(prev => [...prev, `${stepText}...${(currentStep + 1) * 10}%`]);\n        setCurrentStep(prev => prev + 1);\n\n        if (currentStep === loadingSteps.length - 1) {\n          generateArtifact();\n        }\n      }, 1000);\n\n      // Random hacking messages\n      const hackingTimer = setInterval(() => {\n        const randomMessage = hackingMessages[Math.floor(Math.random() * hackingMessages.length)];\n        const path = generateRandomPath();\n        setHackingOutput(prev => [...prev, `[${path}] ${randomMessage}`].slice(-20));\n      }, 200);\n\n      return () => {\n        clearTimeout(timer);\n        clearInterval(hackingTimer);\n      };\n    }\n  }, [loading, currentStep]);\n\n  const makeOpenAIRequest = async (messages: Array<{ role: string; content: string }>, maxTokens: number) => {\n    const apiKey = config.openaiApiKey;\n    \n    if (!apiKey) {\n      throw new Error('OpenAI API key is not configured');\n    }\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages,\n          max_tokens: maxTokens\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error('OpenAI API Error:', {\n          status: response.status,\n          statusText: response.statusText,\n          error: errorData\n        });\n        throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data: ChatResponse = await response.json();\n      return data.choices[0]?.message?.content || '';\n    } catch (error) {\n      console.error('Request error:', error);\n      throw error;\n    }\n  };\n\n  const generateImage = async (prompt: string) => {\n    const apiKey = config.openaiApiKey;\n    \n    if (!apiKey) {\n      throw new Error('OpenAI API key is not configured');\n    }\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/images/generations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: \"dall-e-3\",\n          prompt: `A highly detailed Rick and Morty style illustration of an interdimensional artifact: ${prompt}. The art style should match the show perfectly, with vibrant colors and sci-fi elements. The image should contain NO text or writing of any kind. Focus on creating a visually striking object with intricate details, glowing elements, and otherworldly features.`,\n          n: 1,\n          size: \"1024x1024\",\n          quality: \"standard\",\n          style: \"vivid\"\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error('OpenAI Image Generation Error:', {\n          status: response.status,\n          statusText: response.statusText,\n          error: errorData\n        });\n        throw new Error(`OpenAI Image Generation error: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.data[0].url;\n    } catch (error) {\n      console.error('Image generation error:', error);\n      throw error;\n    }\n  };\n\n  const generateArtifact = async () => {\n    try {\n      // First, get the artifact description and safety tip\n      const [prediction, survivalTip] = await Promise.all([\n        makeOpenAIRequest([{\n          role: \"system\",\n          content: \"You are an interdimensional artifact analyzer providing quirky, Rick and Morty-style analysis. Describe a weird, unique interdimensional artifact that could exist in the Rick and Morty universe. Keep responses concise (2-3 sentences), entertaining, and mysterious. Focus on the physical appearance and strange properties of the artifact.\"\n        }, {\n          role: \"user\",\n          content: \"Generate a random interdimensional artifact analysis or prediction.\"\n        }], 100),\n        makeOpenAIRequest([{\n          role: \"system\",\n          content: \"You are an advanced AI providing survival tips related to interdimensional artifacts. Include specific warnings about handling the artifact. Keep it in the style of Rick and Morty.\"\n        }, {\n          role: \"user\",\n          content: \"Generate a survival tip for handling an interdimensional artifact.\"\n        }], 150)\n      ]);\n\n      // Then, use the prediction to generate a matching image\n      const imageUrl = await generateImage(prediction);\n\n      setArtifactData({\n        prediction,\n        survivalTip,\n        imageUrl\n      });\n      setLoading(false);\n    } catch (error) {\n      console.error('Error generating artifact:', error);\n      setArtifactData({\n        prediction: 'Error connecting to the multiverse. Please try again.',\n        survivalTip: 'Connection lost. Unable to retrieve safety protocols.',\n        imageUrl: ''\n      });\n      setLoading(false);\n    }\n  };\n\n  const startGeneration = () => {\n    setLoading(true);\n    setCurrentStep(0);\n    setLoadingProgress([]);\n    setArtifactData(null);\n  };\n\n  return (\n    <Section>\n      <FeaturesContainer>\n        <QuantumTerminal>\n          {!loading && !artifactData && (\n            <MainButton onClick={startGeneration}>\n              Generate Quantum Squanch Artifact\n            </MainButton>\n          )}\n\n          {loading && (\n            <LoadingSequence>\n              {loadingProgress.map((step, index) => (\n                <ProgressText key={`progress-${index}`}>{step}</ProgressText>\n              ))}\n              {hackingOutput.map((output, index) => (\n                <ProgressText key={`hacking-${index}`} style={{ color: '#00ff00', opacity: 0.6 }}>\n                  {output}\n                </ProgressText>\n              ))}\n              <Cursor />\n            </LoadingSequence>\n          )}\n\n          {artifactData && (\n            <ArtifactDisplay>\n              <ArtifactText>{artifactData.prediction}</ArtifactText>\n              <ArtifactImage src={artifactData.imageUrl} alt=\"Quantum Artifact\" />\n              <ArtifactText>⚠ Safety Protocol:</ArtifactText>\n              <ArtifactText>{artifactData.survivalTip}</ArtifactText>\n            </ArtifactDisplay>\n          )}\n        </QuantumTerminal>\n      </FeaturesContainer>\n    </Section>\n  );\n}; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,IAAIC,SAAS,QAAQ,mBAAmB;AACrD,SAASC,MAAM,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,cAAc,GAAGJ,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMK,OAAO,GAAGN,MAAM,CAACO,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiBF,cAAc;AAC/B;AACA;AACA,CAAC;AAACG,EAAA,GApBIF,OAAO;AAsBb,MAAMG,iBAAiB,GAAGT,MAAM,CAACU,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAVIF,iBAAiB;AAYvB,MAAMG,eAAe,GAAGZ,MAAM,CAACU,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GAfID,eAAe;AAiBrB,MAAME,SAAS,GAAGb,SAAS;AAC3B;AACA;AACA;AACA,CAAC;AAED,MAAMc,UAAU,GAAGf,MAAM,CAACgB,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeF,SAAS;AACxB;AACA;AACA;AACA,iBAAiBA,SAAS;AAC1B;AACA,CAAC;AAACG,GAAA,GAlBIF,UAAU;AAoBhB,MAAMG,eAAe,GAAGlB,MAAM,CAACU,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACS,GAAA,GA3BID,eAAe;AA6BrB,MAAME,YAAY,GAAGpB,MAAM,CAACU,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}