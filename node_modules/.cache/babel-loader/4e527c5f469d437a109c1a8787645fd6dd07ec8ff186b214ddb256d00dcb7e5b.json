{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/PortalBackground.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackgroundContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: -1;\n  canvas {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n  }\n`;\n_c = BackgroundContainer;\nconst portalVertexShader = `\n  varying vec2 vUv;\n  varying vec3 vPosition;\n  \n  void main() {\n    vUv = uv;\n    vPosition = position;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\nconst portalFragmentShader = `\n  uniform float time;\n  varying vec2 vUv;\n\n  #define PI 3.14159265359\n\n  // Simplified noise function for better performance\n  float hash(vec2 p) {\n    float h = dot(p, vec2(127.1, 311.7));\n    return fract(sin(h) * 43758.5453123);\n  }\n\n  float noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f = f * f * (3.0 - 2.0 * f);\n    return mix(\n      mix(hash(i), hash(i + vec2(1.0, 0.0)), f.x),\n      mix(hash(i + vec2(0.0, 1.0)), hash(i + vec2(1.0, 1.0)), f.x),\n      f.y\n    );\n  }\n\n  void main() {\n    vec2 center = vec2(0.5);\n    vec2 p = vUv - center;\n    float r = length(p);\n    float angle = atan(p.y, p.x);\n\n    // Simplified spiral calculation\n    float spiral = angle - 3.0 * r + time * 0.5;\n    \n    // Basic noise for energy effect\n    float n = noise(vec2(r * 5.0 - time * 0.2, spiral * 2.0));\n    \n    // Color palette\n    vec3 color1 = vec3(0.5, 0.0, 1.0); // Purple\n    vec3 color2 = vec3(0.0, 0.0, 0.3); // Dark blue\n    \n    // Simplified color mixing\n    float colorMix = smoothstep(-1.0, 1.0, sin(spiral * 3.0 + n));\n    vec3 finalColor = mix(color2, color1, colorMix);\n    \n    // Add stars\n    float stars = 0.0;\n    for(int i = 0; i < 3; i++) {\n      float fi = float(i);\n      float t = time * (0.5 + fi * 0.1);\n      float scale = 1.0 + fi;\n      \n      vec2 uv = vec2(\n        r * cos(angle + t) * scale,\n        r * sin(angle + t) * scale\n      );\n      \n      float star = hash(uv * 100.0 + fi);\n      star = pow(star, 20.0) * 2.0;\n      stars += star;\n    }\n    \n    finalColor += vec3(stars);\n    \n    // Fade to black in center\n    float vignette = smoothstep(0.0, 0.5, r);\n    finalColor *= vignette;\n    \n    gl_FragColor = vec4(finalColor, 1.0);\n  }\n`;\nexport const PortalBackground = () => {\n  _s();\n  const containerRef = useRef(null);\n  const frameRef = useRef();\n  const timeRef = useRef(0);\n  const rendererRef = useRef(null);\n  const sceneRef = useRef(null);\n  const materialRef = useRef(null);\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 10);\n    camera.position.z = 1;\n    const renderer = new THREE.WebGLRenderer({\n      powerPreference: 'high-performance',\n      antialias: false,\n      stencil: false,\n      depth: false\n    });\n    rendererRef.current = renderer;\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(1); // Force 1:1 pixel ratio for performance\n\n    containerRef.current.appendChild(renderer.domElement);\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: {\n          value: 0\n        }\n      },\n      vertexShader: portalVertexShader,\n      fragmentShader: portalFragmentShader,\n      depthWrite: false,\n      depthTest: false\n    });\n    materialRef.current = material;\n    const geometry = new THREE.PlaneGeometry(2, 2);\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n    let prevTime = performance.now();\n    const animate = () => {\n      const currentTime = performance.now();\n      const deltaTime = (currentTime - prevTime) / 1000;\n      prevTime = currentTime;\n      if (materialRef.current && rendererRef.current && sceneRef.current) {\n        timeRef.current += deltaTime * 0.5; // Slower, smoother time increment\n        materialRef.current.uniforms.time.value = timeRef.current;\n        rendererRef.current.render(sceneRef.current, camera);\n      }\n      frameRef.current = requestAnimationFrame(animate);\n    };\n    frameRef.current = requestAnimationFrame(animate);\n    const handleResize = () => {\n      if (rendererRef.current) {\n        rendererRef.current.setSize(window.innerWidth, window.innerHeight);\n      }\n    };\n    window.addEventListener('resize', handleResize, {\n      passive: true\n    });\n    return () => {\n      var _containerRef$current;\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current);\n      }\n      window.removeEventListener('resize', handleResize);\n      geometry.dispose();\n      material.dispose();\n      renderer.dispose();\n      if ((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(renderer.domElement)) {\n        containerRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BackgroundContainer, {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 10\n  }, this);\n};\n_s(PortalBackground, \"/JprTMQz3fJctCzf2g7abOqAqyY=\");\n_c2 = PortalBackground;\nvar _c, _c2;\n$RefreshReg$(_c, \"BackgroundContainer\");\n$RefreshReg$(_c2, \"PortalBackground\");","map":{"version":3,"names":["React","useEffect","useRef","styled","THREE","jsxDEV","_jsxDEV","BackgroundContainer","div","_c","portalVertexShader","portalFragmentShader","PortalBackground","_s","containerRef","frameRef","timeRef","rendererRef","sceneRef","materialRef","current","scene","Scene","camera","OrthographicCamera","position","z","renderer","WebGLRenderer","powerPreference","antialias","stencil","depth","setSize","window","innerWidth","innerHeight","setPixelRatio","appendChild","domElement","material","ShaderMaterial","uniforms","time","value","vertexShader","fragmentShader","depthWrite","depthTest","geometry","PlaneGeometry","mesh","Mesh","add","prevTime","performance","now","animate","currentTime","deltaTime","render","requestAnimationFrame","handleResize","addEventListener","passive","_containerRef$current","cancelAnimationFrame","removeEventListener","dispose","contains","removeChild","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/PortalBackground.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\n\nconst BackgroundContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: -1;\n  canvas {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n  }\n`;\n\nconst portalVertexShader = `\n  varying vec2 vUv;\n  varying vec3 vPosition;\n  \n  void main() {\n    vUv = uv;\n    vPosition = position;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\n\nconst portalFragmentShader = `\n  uniform float time;\n  varying vec2 vUv;\n\n  #define PI 3.14159265359\n\n  // Simplified noise function for better performance\n  float hash(vec2 p) {\n    float h = dot(p, vec2(127.1, 311.7));\n    return fract(sin(h) * 43758.5453123);\n  }\n\n  float noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f = f * f * (3.0 - 2.0 * f);\n    return mix(\n      mix(hash(i), hash(i + vec2(1.0, 0.0)), f.x),\n      mix(hash(i + vec2(0.0, 1.0)), hash(i + vec2(1.0, 1.0)), f.x),\n      f.y\n    );\n  }\n\n  void main() {\n    vec2 center = vec2(0.5);\n    vec2 p = vUv - center;\n    float r = length(p);\n    float angle = atan(p.y, p.x);\n\n    // Simplified spiral calculation\n    float spiral = angle - 3.0 * r + time * 0.5;\n    \n    // Basic noise for energy effect\n    float n = noise(vec2(r * 5.0 - time * 0.2, spiral * 2.0));\n    \n    // Color palette\n    vec3 color1 = vec3(0.5, 0.0, 1.0); // Purple\n    vec3 color2 = vec3(0.0, 0.0, 0.3); // Dark blue\n    \n    // Simplified color mixing\n    float colorMix = smoothstep(-1.0, 1.0, sin(spiral * 3.0 + n));\n    vec3 finalColor = mix(color2, color1, colorMix);\n    \n    // Add stars\n    float stars = 0.0;\n    for(int i = 0; i < 3; i++) {\n      float fi = float(i);\n      float t = time * (0.5 + fi * 0.1);\n      float scale = 1.0 + fi;\n      \n      vec2 uv = vec2(\n        r * cos(angle + t) * scale,\n        r * sin(angle + t) * scale\n      );\n      \n      float star = hash(uv * 100.0 + fi);\n      star = pow(star, 20.0) * 2.0;\n      stars += star;\n    }\n    \n    finalColor += vec3(stars);\n    \n    // Fade to black in center\n    float vignette = smoothstep(0.0, 0.5, r);\n    finalColor *= vignette;\n    \n    gl_FragColor = vec4(finalColor, 1.0);\n  }\n`;\n\nexport const PortalBackground: React.FC = () => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const frameRef = useRef<number>();\n  const timeRef = useRef<number>(0);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const materialRef = useRef<THREE.ShaderMaterial | null>(null);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n    \n    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 10);\n    camera.position.z = 1;\n\n    const renderer = new THREE.WebGLRenderer({ \n      powerPreference: 'high-performance',\n      antialias: false,\n      stencil: false,\n      depth: false\n    });\n    \n    rendererRef.current = renderer;\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(1); // Force 1:1 pixel ratio for performance\n\n    containerRef.current.appendChild(renderer.domElement);\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: { value: 0 }\n      },\n      vertexShader: portalVertexShader,\n      fragmentShader: portalFragmentShader,\n      depthWrite: false,\n      depthTest: false\n    });\n    \n    materialRef.current = material;\n\n    const geometry = new THREE.PlaneGeometry(2, 2);\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    let prevTime = performance.now();\n    \n    const animate = () => {\n      const currentTime = performance.now();\n      const deltaTime = (currentTime - prevTime) / 1000;\n      prevTime = currentTime;\n\n      if (materialRef.current && rendererRef.current && sceneRef.current) {\n        timeRef.current += deltaTime * 0.5; // Slower, smoother time increment\n        materialRef.current.uniforms.time.value = timeRef.current;\n        rendererRef.current.render(sceneRef.current, camera);\n      }\n\n      frameRef.current = requestAnimationFrame(animate);\n    };\n\n    frameRef.current = requestAnimationFrame(animate);\n\n    const handleResize = () => {\n      if (rendererRef.current) {\n        rendererRef.current.setSize(window.innerWidth, window.innerHeight);\n      }\n    };\n\n    window.addEventListener('resize', handleResize, { passive: true });\n\n    return () => {\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current);\n      }\n      \n      window.removeEventListener('resize', handleResize);\n      \n      geometry.dispose();\n      material.dispose();\n      renderer.dispose();\n      \n      if (containerRef.current?.contains(renderer.domElement)) {\n        containerRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, []);\n\n  return <BackgroundContainer ref={containerRef} />;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}