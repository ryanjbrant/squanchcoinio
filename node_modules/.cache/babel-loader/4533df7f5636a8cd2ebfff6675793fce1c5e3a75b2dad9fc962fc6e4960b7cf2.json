{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/PortalBackground.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackgroundContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: -1;\n  canvas {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n  }\n`;\n_c = BackgroundContainer;\nconst portalVertexShader = `\n  varying vec2 vUv;\n  varying vec3 vPosition;\n  \n  void main() {\n    vUv = uv;\n    vPosition = position;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\nconst portalFragmentShader = `\n  uniform float time;\n  varying vec2 vUv;\n  varying vec3 vPosition;\n\n  #define PI 3.14159265359\n\n  // Noise functions\n  vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n  vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n  vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n  float snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i);\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n      + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n  }\n\n  float fbm(vec2 p) {\n    float sum = 0.0;\n    float amp = 1.0;\n    float freq = 1.0;\n    // Reduced octaves for simpler effect\n    for(int i = 0; i < 4; i++) {\n      sum += amp * snoise(p * freq);\n      freq *= 2.0;\n      amp *= 0.5;\n      p = p * 1.2 + vec2(3.2);\n    }\n    return sum;\n  }\n\n  // Star field function\n  float star(vec2 uv, float flare) {\n    float d = length(uv);\n    float m = 0.002/d;  // Tiny stars\n    \n    // Core star\n    float core = smoothstep(0.9, 1.0, m);\n    \n    // Bright center\n    float brightCore = smoothstep(0.95, 1.0, m) * 2.0;\n    \n    // Outer glow\n    float glow = 0.004/d;\n    glow = smoothstep(0.8, 1.0, glow) * 0.4;\n    \n    // Tiny rays for sparkle\n    float rays = max(0.0, 1.0 - abs(uv.x * uv.y * 4000.0));\n    rays *= 0.2 * flare;\n    \n    return core + brightCore + glow + rays;\n  }\n\n  vec2 rotate(vec2 p, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(p.x * c - p.y * s, p.x * s + p.y * c);\n  }\n\n  void main() {\n    vec2 center = vec2(0.5, 0.5);\n    vec2 p = vUv - center;\n    float r = length(p);\n    float angle = atan(p.y, p.x);\n\n    // Create seamless spiral effect with fewer arms\n    float t = time * 0.2;\n    float spiral = angle / (2.0 * PI) + log(r) * 0.5;\n    spiral = fract(spiral * 2.0 - t); // Reduced for fewer arms\n\n    // Create seamless noise with larger features\n    vec2 rotatedUv = vec2(cos(t) * p.x - sin(t) * p.y, sin(t) * p.x + cos(t) * p.y);\n    float noise1 = fbm(vec2(r * 2.0 + t, spiral * 3.0));\n    float noise2 = fbm(vec2(r * 1.5 - t * 0.5, spiral * 2.0));\n\n    // Enhanced spiral flow with wider bands\n    float flow = smoothstep(0.0, 0.8, spiral) * smoothstep(1.0, 0.2, spiral);\n    \n    // Improved energy effect with thicker bands\n    float energy = flow + noise1 * 0.3;\n    energy *= smoothstep(0.0, 0.2, r);\n    energy *= smoothstep(1.0, 0.3, r);\n\n    // Color palette with deeper purples\n    vec3 darkVoid = vec3(0.0, 0.0, 0.0);\n    vec3 energyColor1 = vec3(0.6, 0.0, 0.9); // Deep purple\n    vec3 energyColor2 = vec3(0.4, 0.0, 0.7); // Darker purple\n\n    // Create base spiral structure with thicker bands\n    float spiralIntensity = smoothstep(0.2, 0.8, energy);\n    vec3 finalColor = mix(darkVoid, energyColor1, spiralIntensity * (1.0 - r));\n\n    // Add layered energy effects with reduced complexity\n    float energyMix1 = noise1 * 0.5 * (1.0 - r);\n    float energyMix2 = noise2 * 0.3 * (1.0 - r);\n\n    finalColor = mix(finalColor, energyColor1, energyMix1);\n    finalColor = mix(finalColor, energyColor2, energyMix2);\n\n    // Add star field\n    float starTime = -time * 0.5; // Reversed for inward flow\n    float starLayer1 = 0.0;\n    float starLayer2 = 0.0;\n    \n    // Create multiple star layers\n    for(int i = 0; i < 35; i++) {\n      float fi = float(i);\n      float t = starTime * (1.0 + fi * 0.1) + fi * 1.23;\n      float scale = 0.2 + fi * 0.05;\n      \n      // Star position with spiral motion\n      float radius = fract(t * 0.1 + fi * 0.123) * 1.2;\n      float angle = -t * 0.5 + fi * 1.57;\n      vec2 xy = vec2(cos(angle), sin(angle)) * radius;\n      \n      vec2 starPos = rotate(xy, -t * 0.2);\n      starPos = starPos * scale;\n      \n      float starIntensity = star(p - starPos, 0.15) * 2.0;\n      \n      float fadeOut = smoothstep(0.0, 0.1, length(starPos));\n      float fadeIn = smoothstep(1.0, 0.3, length(starPos));\n      \n      starLayer1 += starIntensity * fadeOut * fadeIn * 0.3;\n    }\n    \n    // Second star layer with different timing\n    for(int i = 0; i < 25; i++) {\n      float fi = float(i);\n      float t = starTime * (0.8 + fi * 0.1) + fi * 2.34;\n      float scale = 0.15 + fi * 0.03;\n      \n      float radius = fract(t * 0.15 + fi * 0.234) * 1.0;\n      float angle = -t * 0.7 + fi * 2.12;\n      vec2 xy = vec2(cos(angle), sin(angle)) * radius;\n      \n      vec2 starPos = rotate(xy, -t * 0.25);\n      starPos = starPos * scale;\n      \n      float starIntensity = star(p - starPos, 0.1) * 1.5;\n      float fadeOut = smoothstep(0.0, 0.15, length(starPos));\n      float fadeIn = smoothstep(1.0, 0.4, length(starPos));\n      \n      starLayer2 += starIntensity * fadeOut * fadeIn * 0.25;\n    }\n\n    // Add stars to final color\n    vec3 starColor1 = vec3(1.0, 0.95, 1.0); // Almost white\n    vec3 starColor2 = vec3(0.9, 0.85, 1.0); // Slightly purple white\n    \n    finalColor += starColor1 * starLayer1 * 1.5;\n    finalColor += starColor2 * starLayer2 * 1.2;\n\n    // Enhance the void effect\n    float voidStrength = smoothstep(0.15, 0.0, r);\n    finalColor = mix(finalColor, darkVoid, voidStrength);\n\n    gl_FragColor = vec4(finalColor, 1.0);\n  }\n`;\nexport const PortalBackground = () => {\n  _s();\n  const containerRef = useRef(null);\n  const frameRef = useRef();\n  const timeRef = useRef(0);\n  const lastTimeRef = useRef(0);\n  const rendererRef = useRef(null);\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 10);\n    camera.position.z = 1;\n\n    // Optimize renderer\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      powerPreference: 'high-performance',\n      stencil: false,\n      depth: false,\n      alpha: true,\n      precision: 'mediump' // Use medium precision for better performance\n    });\n    rendererRef.current = renderer;\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n    // Enable WebGL optimizations\n    const gl = renderer.getContext();\n    gl.getExtension('OES_standard_derivatives');\n\n    // Disable depth and blend operations for 2D rendering\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n    containerRef.current.appendChild(renderer.domElement);\n\n    // Create portal material with optimized uniforms\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: {\n          value: 0\n        }\n      },\n      vertexShader: portalVertexShader,\n      fragmentShader: portalFragmentShader,\n      transparent: false,\n      depthWrite: false,\n      depthTest: false\n    });\n\n    // Use simpler geometry with minimal segments\n    const geometry = new THREE.PlaneGeometry(2, 2, 1, 1);\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    // Optimized animation loop with delta time\n    const animate = timestamp => {\n      if (!material || !renderer) return;\n\n      // Calculate smooth delta time\n      const deltaTime = timestamp - lastTimeRef.current;\n      lastTimeRef.current = timestamp;\n\n      // Update time at a consistent rate, capped at 60fps\n      const targetFrameTime = 1000 / 60;\n      const frameProgress = Math.min(deltaTime / targetFrameTime, 1);\n      timeRef.current += 0.01 * frameProgress; // Consistent time step\n\n      material.uniforms.time.value = timeRef.current;\n      renderer.render(scene, camera);\n      frameRef.current = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    lastTimeRef.current = performance.now();\n    frameRef.current = requestAnimationFrame(animate);\n\n    // Optimized resize handler with debounce and size check\n    let resizeTimeout;\n    let lastWidth = window.innerWidth;\n    let lastHeight = window.innerHeight;\n    const handleResize = () => {\n      if (resizeTimeout) {\n        cancelAnimationFrame(resizeTimeout);\n      }\n      resizeTimeout = requestAnimationFrame(() => {\n        if (!renderer) return;\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n\n        // Only resize if dimensions actually changed\n        if (width !== lastWidth || height !== lastHeight) {\n          renderer.setSize(width, height);\n          lastWidth = width;\n          lastHeight = height;\n        }\n      });\n    };\n    window.addEventListener('resize', handleResize, {\n      passive: true\n    });\n\n    // Cleanup\n    return () => {\n      var _containerRef$current;\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current);\n      }\n      if (resizeTimeout) {\n        cancelAnimationFrame(resizeTimeout);\n      }\n      window.removeEventListener('resize', handleResize);\n      renderer.dispose();\n      geometry.dispose();\n      material.dispose();\n      if ((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(renderer.domElement)) {\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      rendererRef.current = null;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BackgroundContainer, {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 10\n  }, this);\n};\n_s(PortalBackground, \"JhcbDYm+CmBObDCmLsL11AsXCeY=\");\n_c2 = PortalBackground;\nvar _c, _c2;\n$RefreshReg$(_c, \"BackgroundContainer\");\n$RefreshReg$(_c2, \"PortalBackground\");","map":{"version":3,"names":["React","useEffect","useRef","styled","THREE","jsxDEV","_jsxDEV","BackgroundContainer","div","_c","portalVertexShader","portalFragmentShader","PortalBackground","_s","containerRef","frameRef","timeRef","lastTimeRef","rendererRef","current","scene","Scene","camera","OrthographicCamera","position","z","renderer","WebGLRenderer","antialias","powerPreference","stencil","depth","alpha","precision","setSize","window","innerWidth","innerHeight","setPixelRatio","Math","min","devicePixelRatio","gl","getContext","getExtension","disable","DEPTH_TEST","BLEND","appendChild","domElement","material","ShaderMaterial","uniforms","time","value","vertexShader","fragmentShader","transparent","depthWrite","depthTest","geometry","PlaneGeometry","mesh","Mesh","add","animate","timestamp","deltaTime","targetFrameTime","frameProgress","render","requestAnimationFrame","performance","now","resizeTimeout","lastWidth","lastHeight","handleResize","cancelAnimationFrame","width","height","addEventListener","passive","_containerRef$current","removeEventListener","dispose","contains","removeChild","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/PortalBackground.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\n\nconst BackgroundContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: -1;\n  canvas {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n  }\n`;\n\nconst portalVertexShader = `\n  varying vec2 vUv;\n  varying vec3 vPosition;\n  \n  void main() {\n    vUv = uv;\n    vPosition = position;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\n\nconst portalFragmentShader = `\n  uniform float time;\n  varying vec2 vUv;\n  varying vec3 vPosition;\n\n  #define PI 3.14159265359\n\n  // Noise functions\n  vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n  vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n  vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n  float snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i);\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n      + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n  }\n\n  float fbm(vec2 p) {\n    float sum = 0.0;\n    float amp = 1.0;\n    float freq = 1.0;\n    // Reduced octaves for simpler effect\n    for(int i = 0; i < 4; i++) {\n      sum += amp * snoise(p * freq);\n      freq *= 2.0;\n      amp *= 0.5;\n      p = p * 1.2 + vec2(3.2);\n    }\n    return sum;\n  }\n\n  // Star field function\n  float star(vec2 uv, float flare) {\n    float d = length(uv);\n    float m = 0.002/d;  // Tiny stars\n    \n    // Core star\n    float core = smoothstep(0.9, 1.0, m);\n    \n    // Bright center\n    float brightCore = smoothstep(0.95, 1.0, m) * 2.0;\n    \n    // Outer glow\n    float glow = 0.004/d;\n    glow = smoothstep(0.8, 1.0, glow) * 0.4;\n    \n    // Tiny rays for sparkle\n    float rays = max(0.0, 1.0 - abs(uv.x * uv.y * 4000.0));\n    rays *= 0.2 * flare;\n    \n    return core + brightCore + glow + rays;\n  }\n\n  vec2 rotate(vec2 p, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(p.x * c - p.y * s, p.x * s + p.y * c);\n  }\n\n  void main() {\n    vec2 center = vec2(0.5, 0.5);\n    vec2 p = vUv - center;\n    float r = length(p);\n    float angle = atan(p.y, p.x);\n\n    // Create seamless spiral effect with fewer arms\n    float t = time * 0.2;\n    float spiral = angle / (2.0 * PI) + log(r) * 0.5;\n    spiral = fract(spiral * 2.0 - t); // Reduced for fewer arms\n\n    // Create seamless noise with larger features\n    vec2 rotatedUv = vec2(cos(t) * p.x - sin(t) * p.y, sin(t) * p.x + cos(t) * p.y);\n    float noise1 = fbm(vec2(r * 2.0 + t, spiral * 3.0));\n    float noise2 = fbm(vec2(r * 1.5 - t * 0.5, spiral * 2.0));\n\n    // Enhanced spiral flow with wider bands\n    float flow = smoothstep(0.0, 0.8, spiral) * smoothstep(1.0, 0.2, spiral);\n    \n    // Improved energy effect with thicker bands\n    float energy = flow + noise1 * 0.3;\n    energy *= smoothstep(0.0, 0.2, r);\n    energy *= smoothstep(1.0, 0.3, r);\n\n    // Color palette with deeper purples\n    vec3 darkVoid = vec3(0.0, 0.0, 0.0);\n    vec3 energyColor1 = vec3(0.6, 0.0, 0.9); // Deep purple\n    vec3 energyColor2 = vec3(0.4, 0.0, 0.7); // Darker purple\n\n    // Create base spiral structure with thicker bands\n    float spiralIntensity = smoothstep(0.2, 0.8, energy);\n    vec3 finalColor = mix(darkVoid, energyColor1, spiralIntensity * (1.0 - r));\n\n    // Add layered energy effects with reduced complexity\n    float energyMix1 = noise1 * 0.5 * (1.0 - r);\n    float energyMix2 = noise2 * 0.3 * (1.0 - r);\n\n    finalColor = mix(finalColor, energyColor1, energyMix1);\n    finalColor = mix(finalColor, energyColor2, energyMix2);\n\n    // Add star field\n    float starTime = -time * 0.5; // Reversed for inward flow\n    float starLayer1 = 0.0;\n    float starLayer2 = 0.0;\n    \n    // Create multiple star layers\n    for(int i = 0; i < 35; i++) {\n      float fi = float(i);\n      float t = starTime * (1.0 + fi * 0.1) + fi * 1.23;\n      float scale = 0.2 + fi * 0.05;\n      \n      // Star position with spiral motion\n      float radius = fract(t * 0.1 + fi * 0.123) * 1.2;\n      float angle = -t * 0.5 + fi * 1.57;\n      vec2 xy = vec2(cos(angle), sin(angle)) * radius;\n      \n      vec2 starPos = rotate(xy, -t * 0.2);\n      starPos = starPos * scale;\n      \n      float starIntensity = star(p - starPos, 0.15) * 2.0;\n      \n      float fadeOut = smoothstep(0.0, 0.1, length(starPos));\n      float fadeIn = smoothstep(1.0, 0.3, length(starPos));\n      \n      starLayer1 += starIntensity * fadeOut * fadeIn * 0.3;\n    }\n    \n    // Second star layer with different timing\n    for(int i = 0; i < 25; i++) {\n      float fi = float(i);\n      float t = starTime * (0.8 + fi * 0.1) + fi * 2.34;\n      float scale = 0.15 + fi * 0.03;\n      \n      float radius = fract(t * 0.15 + fi * 0.234) * 1.0;\n      float angle = -t * 0.7 + fi * 2.12;\n      vec2 xy = vec2(cos(angle), sin(angle)) * radius;\n      \n      vec2 starPos = rotate(xy, -t * 0.25);\n      starPos = starPos * scale;\n      \n      float starIntensity = star(p - starPos, 0.1) * 1.5;\n      float fadeOut = smoothstep(0.0, 0.15, length(starPos));\n      float fadeIn = smoothstep(1.0, 0.4, length(starPos));\n      \n      starLayer2 += starIntensity * fadeOut * fadeIn * 0.25;\n    }\n\n    // Add stars to final color\n    vec3 starColor1 = vec3(1.0, 0.95, 1.0); // Almost white\n    vec3 starColor2 = vec3(0.9, 0.85, 1.0); // Slightly purple white\n    \n    finalColor += starColor1 * starLayer1 * 1.5;\n    finalColor += starColor2 * starLayer2 * 1.2;\n\n    // Enhance the void effect\n    float voidStrength = smoothstep(0.15, 0.0, r);\n    finalColor = mix(finalColor, darkVoid, voidStrength);\n\n    gl_FragColor = vec4(finalColor, 1.0);\n  }\n`;\n\nexport const PortalBackground: React.FC = () => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const frameRef = useRef<number>();\n  const timeRef = useRef<number>(0);\n  const lastTimeRef = useRef<number>(0);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 10);\n    camera.position.z = 1;\n\n    // Optimize renderer\n    const renderer = new THREE.WebGLRenderer({ \n      antialias: true,\n      powerPreference: 'high-performance',\n      stencil: false,\n      depth: false,\n      alpha: true,\n      precision: 'mediump' // Use medium precision for better performance\n    });\n    \n    rendererRef.current = renderer;\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    \n    // Enable WebGL optimizations\n    const gl = renderer.getContext();\n    gl.getExtension('OES_standard_derivatives');\n    \n    // Disable depth and blend operations for 2D rendering\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n\n    containerRef.current.appendChild(renderer.domElement);\n\n    // Create portal material with optimized uniforms\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: { value: 0 }\n      },\n      vertexShader: portalVertexShader,\n      fragmentShader: portalFragmentShader,\n      transparent: false,\n      depthWrite: false,\n      depthTest: false\n    });\n\n    // Use simpler geometry with minimal segments\n    const geometry = new THREE.PlaneGeometry(2, 2, 1, 1);\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    // Optimized animation loop with delta time\n    const animate = (timestamp: number) => {\n      if (!material || !renderer) return;\n\n      // Calculate smooth delta time\n      const deltaTime = timestamp - lastTimeRef.current;\n      lastTimeRef.current = timestamp;\n      \n      // Update time at a consistent rate, capped at 60fps\n      const targetFrameTime = 1000 / 60;\n      const frameProgress = Math.min(deltaTime / targetFrameTime, 1);\n      timeRef.current += 0.01 * frameProgress; // Consistent time step\n      \n      material.uniforms.time.value = timeRef.current;\n\n      renderer.render(scene, camera);\n      frameRef.current = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    lastTimeRef.current = performance.now();\n    frameRef.current = requestAnimationFrame(animate);\n\n    // Optimized resize handler with debounce and size check\n    let resizeTimeout: number;\n    let lastWidth = window.innerWidth;\n    let lastHeight = window.innerHeight;\n    \n    const handleResize = () => {\n      if (resizeTimeout) {\n        cancelAnimationFrame(resizeTimeout);\n      }\n      \n      resizeTimeout = requestAnimationFrame(() => {\n        if (!renderer) return;\n        \n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        \n        // Only resize if dimensions actually changed\n        if (width !== lastWidth || height !== lastHeight) {\n          renderer.setSize(width, height);\n          lastWidth = width;\n          lastHeight = height;\n        }\n      });\n    };\n\n    window.addEventListener('resize', handleResize, { passive: true });\n\n    // Cleanup\n    return () => {\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current);\n      }\n      if (resizeTimeout) {\n        cancelAnimationFrame(resizeTimeout);\n      }\n      window.removeEventListener('resize', handleResize);\n      \n      renderer.dispose();\n      geometry.dispose();\n      material.dispose();\n      \n      if (containerRef.current?.contains(renderer.domElement)) {\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      \n      rendererRef.current = null;\n    };\n  }, []);\n\n  return <BackgroundContainer ref={containerRef} />;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}