{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/BlotterText.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\nimport FontFaceObserver from 'fontfaceobserver';\n\n/**\n * ⚠️ CRITICAL STYLING\n * These styles ensure proper rendering and sizing of the WebGL canvas.\n * The $isHeader prop controls whether the text takes full viewport height.\n * DO NOT modify the width/height calculations or flex properties.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextContainer = styled.div`\n  width: 100%;\n  height: ${props => props.$isHeader ? '100vh' : 'auto'};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  canvas {\n    width: 100% !important;\n    height: ${props => props.$isHeader ? '100vh' : 'auto'} !important;\n    object-fit: contain;\n  }\n`;\n\n/**\n * Fallback component when WebGL is not available\n * Maintains consistent styling with the WebGL version\n */\n_c = TextContainer;\nconst FallbackText = styled.div`\n  width: 100%;\n  height: ${props => props.$isHeader ? '100vh' : 'auto'};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: 'Creepster', cursive;\n  font-size: ${props => props.$isHeader ? '4rem' : '2rem'};\n  color: ${props => props.color || '#fff'};\n`;\n_c2 = FallbackText;\n/**\n * ⚠️ CRITICAL SHADER CODE\n * Basic vertex shader that passes UV coordinates to fragment shader\n * DO NOT modify unless you fully understand WebGL shaders\n */\nconst vertexShader = `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\n\n/**\n * ⚠️ CRITICAL SHADER CODE\n * Fragment shader that creates the liquid distortion effect\n * Carefully tuned parameters for stability and performance\n * DO NOT modify the following:\n * - UV clamping\n * - Alpha channel handling\n * - Distortion parameters\n */\nconst fragmentShader = `\n  uniform float time;\n  uniform float distortionFactor;\n  uniform float scrollVelocity;\n  uniform vec2 mousePos;\n  uniform vec3 color;\n  uniform sampler2D textTexture;\n  varying vec2 vUv;\n\n  void main() {\n    vec2 uv = vUv;\n    \n    // Calculate distance from mouse with much smaller radius but sharper falloff\n    float dist = distance(mousePos, uv);\n    float influence = smoothstep(0.1, 0.0, dist) * distortionFactor;\n    influence = pow(influence, 0.7); // Sharper falloff but maintain strength\n    \n    // Add scroll-based stretching effect with much larger vertical magnitude\n    float scrollStretch = scrollVelocity * 0.35 * (1.0 - uv.y); // Increased from 0.15 to 0.35\n    scrollStretch *= 1.0 + sin(uv.y * 3.14159 * 2.0); // More dramatic non-linear stretching\n    scrollStretch *= 1.0 + abs(scrollVelocity); // Additional stretch based on speed\n    uv.y += scrollStretch;\n    \n    // Add reduced horizontal wave distortion during scroll\n    float scrollWave = sin(uv.y * 20.0 + time * 2.0) * scrollVelocity * 0.01; // Reduced from 0.05 to 0.01\n    uv.x += scrollWave;\n    \n    // Create more intense wave effect with higher frequency (mouse interaction)\n    float wave = sin(uv.x * 30.0 + time) * 0.06 * influence;\n    wave += cos(uv.y * 25.0 + time * 0.8) * 0.04 * influence;\n    uv.y += wave;\n    \n    // Create more detailed liquid-like distortion\n    float distortion = sin(uv.x * 20.0 + time * 1.5) * cos(uv.y * 15.0 + time) * influence;\n    distortion += sin(uv.y * 12.0 - time) * 0.02 * influence;\n    uv += distortion * 0.05;\n\n    // Add a tighter ripple effect\n    float ripple = sin(dist * 50.0 - time * 3.0) * 0.03 * influence;\n    uv += ripple;\n\n    // Sample the text texture with clamping\n    vec2 clampedUv = clamp(uv, 0.0, 1.0);\n    vec4 texColor = texture2D(textTexture, clampedUv);\n    \n    // Use the red channel as alpha (since we drew white text on black)\n    float alpha = texColor.r;\n    \n    // Output final color\n    gl_FragColor = vec4(color, alpha);\n  }\n`;\n\n/**\n * ⚠️ CRITICAL INITIALIZATION\n * Static WebGL availability check\n * DO NOT modify this check as it's essential for fallback handling\n */\nconst webGLAvailable = (() => {\n  try {\n    const canvas = document.createElement('canvas');\n    return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\n  } catch (e) {\n    return false;\n  }\n})();\n\n/**\n * ⚠️ CRITICAL UTILITY\n * Color parsing utility that handles rgba values\n * Essential for proper color handling in WebGL\n */\nconst parseRGBA = color => {\n  if (color.startsWith('rgba')) {\n    const matches = color.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)/);\n    if (matches) {\n      return `rgb(${matches[1]}, ${matches[2]}, ${matches[3]})`;\n    }\n  }\n  return color;\n};\n\n// Add font loading check\nconst fontLoader = new FontFaceObserver('Creepster');\n\n/**\n * Utility function for smooth interpolation\n */\nconst lerp = (start, end, factor) => {\n  return start + (end - start) * factor;\n};\nexport const BlotterText = ({\n  text,\n  size = 100,\n  fill = '#fff',\n  className,\n  isHeader = false\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const rendererRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const materialRef = useRef(null);\n  const mousePos = useRef({\n    x: 0.5,\n    y: 0.5\n  });\n  const frameRef = useRef();\n  const lastScrollY = useRef(window.scrollY);\n  const scrollVelocity = useRef(0);\n  const targetScrollVelocity = useRef(0);\n  const [hasError, setHasError] = useState(!webGLAvailable);\n  const [fontLoaded, setFontLoaded] = useState(false);\n\n  // Load font first\n  useEffect(() => {\n    fontLoader.load().then(() => {\n      setFontLoaded(true);\n    }).catch(err => {\n      console.warn('Font loading failed:', err);\n      setFontLoaded(true); // Continue anyway with fallback font\n    });\n  }, []);\n  useEffect(() => {\n    if (!containerRef.current || hasError || !fontLoaded) return;\n    try {\n      // Cleanup previous instance if it exists\n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n        rendererRef.current = null;\n      }\n\n      // Get initial dimensions\n      const initialWidth = containerRef.current.clientWidth || window.innerWidth;\n      const initialHeight = isHeader ? window.innerHeight : containerRef.current.clientHeight || window.innerHeight;\n      if (initialWidth === 0 || initialHeight === 0) {\n        console.error('Invalid container dimensions');\n        setHasError(true);\n        return;\n      }\n\n      // Setup Three.js scene\n      const scene = new THREE.Scene();\n      sceneRef.current = scene;\n\n      // Setup camera\n      const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 10);\n      camera.position.z = 1;\n      cameraRef.current = camera;\n\n      // Setup renderer with error handling\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true,\n        powerPreference: 'default',\n        preserveDrawingBuffer: true\n      });\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n      renderer.setSize(initialWidth, initialHeight);\n      rendererRef.current = renderer;\n\n      // Clear container\n      while (containerRef.current.firstChild) {\n        containerRef.current.removeChild(containerRef.current.firstChild);\n      }\n      containerRef.current.appendChild(renderer.domElement);\n\n      // Create text texture\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d', {\n        alpha: true\n      });\n      if (!ctx) {\n        setHasError(true);\n        return;\n      }\n\n      // Set canvas size based on container size\n      const containerAspect = initialWidth / initialHeight;\n\n      // Use power-of-two dimensions for textures, ensuring minimum size\n      const minSize = 256;\n      const textureWidth = Math.max(minSize, Math.pow(2, Math.ceil(Math.log2(Math.min(2048, initialWidth)))));\n      const textureHeight = Math.max(minSize, Math.pow(2, Math.ceil(Math.log2(textureWidth / containerAspect))));\n      canvas.width = textureWidth;\n      canvas.height = textureHeight;\n\n      // Fill canvas with black background\n      ctx.fillStyle = '#000000';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Calculate and set font size\n      const fontSize = isHeader ? Math.floor(canvas.height * 0.25) : Math.floor(canvas.height * 0.8);\n      ctx.font = `bold ${fontSize}px Creepster`;\n      ctx.fillStyle = '#ffffff';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n\n      // Measure and scale text if needed\n      const textMetrics = ctx.measureText(text);\n      const textWidth = textMetrics.width;\n      const maxWidth = canvas.width * 0.9;\n      if (textWidth > maxWidth) {\n        const scale = maxWidth / textWidth;\n        ctx.font = `bold ${Math.floor(fontSize * scale)}px Creepster`;\n      }\n\n      // Draw text\n      ctx.fillText(text, canvas.width / 2, canvas.height / 2);\n\n      // Create texture with proper settings\n      const texture = new THREE.Texture(canvas);\n      texture.needsUpdate = true;\n      texture.minFilter = THREE.LinearFilter;\n      texture.magFilter = THREE.LinearFilter;\n      texture.format = THREE.RGBAFormat;\n      texture.type = THREE.UnsignedByteType;\n\n      // Parse color properly\n      const color = new THREE.Color();\n      try {\n        const parsedColor = parseRGBA(fill);\n        color.setStyle(parsedColor);\n      } catch (e) {\n        console.warn('Color parsing failed, using default white');\n        color.setRGB(1, 1, 1);\n      }\n\n      // Create shader material\n      const material = new THREE.ShaderMaterial({\n        uniforms: {\n          time: {\n            value: 0\n          },\n          distortionFactor: {\n            value: 0\n          },\n          scrollVelocity: {\n            value: 0\n          },\n          mousePos: {\n            value: new THREE.Vector2(0.5, 0.5)\n          },\n          color: {\n            value: color\n          },\n          textTexture: {\n            value: texture\n          }\n        },\n        vertexShader,\n        fragmentShader,\n        transparent: true\n      });\n      materialRef.current = material;\n\n      // Create mesh with proper aspect ratio\n      const geometry = new THREE.PlaneGeometry(2, 2 / containerAspect);\n      const mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n      let isAnimating = true;\n      let lastTime = performance.now();\n      let deltaTime = 0;\n      const animate = () => {\n        if (!isAnimating || !material || !renderer || !scene || !camera) return;\n        const currentTime = performance.now();\n        deltaTime = (currentTime - lastTime) / 1000; // Convert to seconds\n        lastTime = currentTime;\n\n        // Smooth out scroll velocity\n        scrollVelocity.current = lerp(scrollVelocity.current, targetScrollVelocity.current, Math.min(1, deltaTime * 8) // Adjust this value to control smoothness\n        );\n        material.uniforms.time.value += deltaTime;\n        material.uniforms.mousePos.value.set(mousePos.current.x, mousePos.current.y);\n        material.uniforms.scrollVelocity.value = scrollVelocity.current;\n\n        // Natural velocity decay\n        targetScrollVelocity.current *= Math.pow(0.95, deltaTime * 60);\n        renderer.render(scene, camera);\n        frameRef.current = requestAnimationFrame(animate);\n      };\n      frameRef.current = requestAnimationFrame(animate);\n\n      // Handle mouse movement\n      const handleMouseMove = e => {\n        var _containerRef$current;\n        const rect = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.getBoundingClientRect();\n        if (!rect) return;\n        mousePos.current = {\n          x: (e.clientX - rect.left) / rect.width,\n          y: 1 - (e.clientY - rect.top) / rect.height\n        };\n        if (materialRef.current) {\n          const dist = Math.hypot(mousePos.current.x - 0.5, mousePos.current.y - 0.5);\n          // Increase maximum distortion for more intense effect\n          materialRef.current.uniforms.distortionFactor.value = Math.min(dist * 4, 2.0);\n        }\n      };\n      window.addEventListener('mousemove', handleMouseMove);\n\n      // Handle resize\n      const handleResize = () => {\n        if (!containerRef.current || !renderer || !camera) return;\n        const newWidth = containerRef.current.clientWidth;\n        const newHeight = isHeader ? window.innerHeight : containerRef.current.clientHeight;\n        const newAspect = newWidth / newHeight;\n        renderer.setSize(newWidth, newHeight);\n        camera.left = -1;\n        camera.right = 1;\n        camera.top = 1 / newAspect;\n        camera.bottom = -1 / newAspect;\n        camera.updateProjectionMatrix();\n      };\n      window.addEventListener('resize', handleResize);\n      handleResize();\n\n      // Improved scroll handler with better velocity calculation\n      let lastScrollTime = performance.now();\n      let lastScrollDelta = 0;\n      const handleScroll = () => {\n        const currentScrollY = window.scrollY;\n        const currentTime = performance.now();\n        const timeDelta = (currentTime - lastScrollTime) / 1000; // Convert to seconds\n        const scrollDelta = currentScrollY - lastScrollY.current;\n        if (timeDelta > 0) {\n          // Calculate instantaneous velocity\n          const instantVelocity = scrollDelta / timeDelta / window.innerHeight;\n\n          // Smooth out sudden changes in velocity\n          const smoothedVelocity = lerp(lastScrollDelta / timeDelta / window.innerHeight, instantVelocity, 0.5);\n\n          // Update target velocity with clamping\n          targetScrollVelocity.current = Math.max(-4, Math.min(4, smoothedVelocity * 2));\n          lastScrollDelta = scrollDelta;\n          lastScrollTime = currentTime;\n        }\n        lastScrollY.current = currentScrollY;\n      };\n\n      // Add scroll listener\n      window.addEventListener('scroll', handleScroll, {\n        passive: true\n      });\n\n      // Handle WebGL context loss\n      const handleContextLost = () => {\n        isAnimating = false;\n        setHasError(true);\n      };\n      const handleContextRestored = () => {\n        isAnimating = true;\n        setHasError(false);\n      };\n      renderer.domElement.addEventListener('webglcontextlost', handleContextLost);\n      renderer.domElement.addEventListener('webglcontextrestored', handleContextRestored);\n      return () => {\n        isAnimating = false;\n        if (frameRef.current) {\n          cancelAnimationFrame(frameRef.current);\n        }\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('resize', handleResize);\n        window.removeEventListener('scroll', handleScroll);\n        renderer.domElement.removeEventListener('webglcontextlost', handleContextLost);\n        renderer.domElement.removeEventListener('webglcontextrestored', handleContextRestored);\n        renderer.dispose();\n        geometry.dispose();\n        material.dispose();\n        texture.dispose();\n      };\n    } catch (e) {\n      console.error('Setup error:', e);\n      setHasError(true);\n    }\n  }, [text, size, fill, isHeader, hasError, fontLoaded]);\n  if (!fontLoaded || hasError) {\n    return /*#__PURE__*/_jsxDEV(FallbackText, {\n      $isHeader: isHeader,\n      className: className,\n      color: fill,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(TextContainer, {\n    ref: containerRef,\n    className: className,\n    $isHeader: isHeader\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 475,\n    columnNumber: 10\n  }, this);\n};\n_s(BlotterText, \"8SwJS/EGpH+psIAaYTfxxScf4UA=\");\n_c3 = BlotterText;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"TextContainer\");\n$RefreshReg$(_c2, \"FallbackText\");\n$RefreshReg$(_c3, \"BlotterText\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styled","THREE","FontFaceObserver","jsxDEV","_jsxDEV","TextContainer","div","props","$isHeader","_c","FallbackText","color","_c2","vertexShader","fragmentShader","webGLAvailable","canvas","document","createElement","window","WebGLRenderingContext","getContext","e","parseRGBA","startsWith","matches","match","fontLoader","lerp","start","end","factor","BlotterText","text","size","fill","className","isHeader","_s","containerRef","rendererRef","sceneRef","cameraRef","materialRef","mousePos","x","y","frameRef","lastScrollY","scrollY","scrollVelocity","targetScrollVelocity","hasError","setHasError","fontLoaded","setFontLoaded","load","then","catch","err","console","warn","current","dispose","initialWidth","clientWidth","innerWidth","initialHeight","innerHeight","clientHeight","error","scene","Scene","camera","OrthographicCamera","position","z","renderer","WebGLRenderer","antialias","alpha","powerPreference","preserveDrawingBuffer","setPixelRatio","Math","min","devicePixelRatio","setSize","firstChild","removeChild","appendChild","domElement","ctx","containerAspect","minSize","textureWidth","max","pow","ceil","log2","textureHeight","width","height","fillStyle","fillRect","fontSize","floor","font","textAlign","textBaseline","textMetrics","measureText","textWidth","maxWidth","scale","fillText","texture","Texture","needsUpdate","minFilter","LinearFilter","magFilter","format","RGBAFormat","type","UnsignedByteType","Color","parsedColor","setStyle","setRGB","material","ShaderMaterial","uniforms","time","value","distortionFactor","Vector2","textTexture","transparent","geometry","PlaneGeometry","mesh","Mesh","add","isAnimating","lastTime","performance","now","deltaTime","animate","currentTime","set","render","requestAnimationFrame","handleMouseMove","_containerRef$current","rect","getBoundingClientRect","clientX","left","clientY","top","dist","hypot","addEventListener","handleResize","newWidth","newHeight","newAspect","right","bottom","updateProjectionMatrix","lastScrollTime","lastScrollDelta","handleScroll","currentScrollY","timeDelta","scrollDelta","instantVelocity","smoothedVelocity","passive","handleContextLost","handleContextRestored","cancelAnimationFrame","removeEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c3","$RefreshReg$"],"sources":["/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/BlotterText.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\nimport FontFaceObserver from 'fontfaceobserver';\n\n/**\n * ⚠️ CRITICAL STYLING\n * These styles ensure proper rendering and sizing of the WebGL canvas.\n * The $isHeader prop controls whether the text takes full viewport height.\n * DO NOT modify the width/height calculations or flex properties.\n */\nconst TextContainer = styled.div<{ $isHeader?: boolean }>`\n  width: 100%;\n  height: ${props => props.$isHeader ? '100vh' : 'auto'};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  canvas {\n    width: 100% !important;\n    height: ${props => props.$isHeader ? '100vh' : 'auto'} !important;\n    object-fit: contain;\n  }\n`;\n\n/**\n * Fallback component when WebGL is not available\n * Maintains consistent styling with the WebGL version\n */\nconst FallbackText = styled.div<{ $isHeader?: boolean }>`\n  width: 100%;\n  height: ${props => props.$isHeader ? '100vh' : 'auto'};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: 'Creepster', cursive;\n  font-size: ${props => props.$isHeader ? '4rem' : '2rem'};\n  color: ${props => props.color || '#fff'};\n`;\n\ninterface BlotterTextProps {\n  text: string;\n  size?: number;\n  fill?: string;\n  className?: string;\n  isHeader?: boolean;\n}\n\n/**\n * ⚠️ CRITICAL SHADER CODE\n * Basic vertex shader that passes UV coordinates to fragment shader\n * DO NOT modify unless you fully understand WebGL shaders\n */\nconst vertexShader = `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\n\n/**\n * ⚠️ CRITICAL SHADER CODE\n * Fragment shader that creates the liquid distortion effect\n * Carefully tuned parameters for stability and performance\n * DO NOT modify the following:\n * - UV clamping\n * - Alpha channel handling\n * - Distortion parameters\n */\nconst fragmentShader = `\n  uniform float time;\n  uniform float distortionFactor;\n  uniform float scrollVelocity;\n  uniform vec2 mousePos;\n  uniform vec3 color;\n  uniform sampler2D textTexture;\n  varying vec2 vUv;\n\n  void main() {\n    vec2 uv = vUv;\n    \n    // Calculate distance from mouse with much smaller radius but sharper falloff\n    float dist = distance(mousePos, uv);\n    float influence = smoothstep(0.1, 0.0, dist) * distortionFactor;\n    influence = pow(influence, 0.7); // Sharper falloff but maintain strength\n    \n    // Add scroll-based stretching effect with much larger vertical magnitude\n    float scrollStretch = scrollVelocity * 0.35 * (1.0 - uv.y); // Increased from 0.15 to 0.35\n    scrollStretch *= 1.0 + sin(uv.y * 3.14159 * 2.0); // More dramatic non-linear stretching\n    scrollStretch *= 1.0 + abs(scrollVelocity); // Additional stretch based on speed\n    uv.y += scrollStretch;\n    \n    // Add reduced horizontal wave distortion during scroll\n    float scrollWave = sin(uv.y * 20.0 + time * 2.0) * scrollVelocity * 0.01; // Reduced from 0.05 to 0.01\n    uv.x += scrollWave;\n    \n    // Create more intense wave effect with higher frequency (mouse interaction)\n    float wave = sin(uv.x * 30.0 + time) * 0.06 * influence;\n    wave += cos(uv.y * 25.0 + time * 0.8) * 0.04 * influence;\n    uv.y += wave;\n    \n    // Create more detailed liquid-like distortion\n    float distortion = sin(uv.x * 20.0 + time * 1.5) * cos(uv.y * 15.0 + time) * influence;\n    distortion += sin(uv.y * 12.0 - time) * 0.02 * influence;\n    uv += distortion * 0.05;\n\n    // Add a tighter ripple effect\n    float ripple = sin(dist * 50.0 - time * 3.0) * 0.03 * influence;\n    uv += ripple;\n\n    // Sample the text texture with clamping\n    vec2 clampedUv = clamp(uv, 0.0, 1.0);\n    vec4 texColor = texture2D(textTexture, clampedUv);\n    \n    // Use the red channel as alpha (since we drew white text on black)\n    float alpha = texColor.r;\n    \n    // Output final color\n    gl_FragColor = vec4(color, alpha);\n  }\n`;\n\n/**\n * ⚠️ CRITICAL INITIALIZATION\n * Static WebGL availability check\n * DO NOT modify this check as it's essential for fallback handling\n */\nconst webGLAvailable = (() => {\n  try {\n    const canvas = document.createElement('canvas');\n    return !!(window.WebGLRenderingContext && \n      (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\n  } catch (e) {\n    return false;\n  }\n})();\n\n/**\n * ⚠️ CRITICAL UTILITY\n * Color parsing utility that handles rgba values\n * Essential for proper color handling in WebGL\n */\nconst parseRGBA = (color: string): string => {\n  if (color.startsWith('rgba')) {\n    const matches = color.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)/);\n    if (matches) {\n      return `rgb(${matches[1]}, ${matches[2]}, ${matches[3]})`;\n    }\n  }\n  return color;\n};\n\n// Add font loading check\nconst fontLoader = new FontFaceObserver('Creepster');\n\n/**\n * Utility function for smooth interpolation\n */\nconst lerp = (start: number, end: number, factor: number) => {\n  return start + (end - start) * factor;\n};\n\nexport const BlotterText: React.FC<BlotterTextProps> = ({ \n  text, \n  size = 100,\n  fill = '#fff',\n  className,\n  isHeader = false\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const cameraRef = useRef<THREE.OrthographicCamera | null>(null);\n  const materialRef = useRef<THREE.ShaderMaterial | null>(null);\n  const mousePos = useRef<{ x: number; y: number }>({ x: 0.5, y: 0.5 });\n  const frameRef = useRef<number>();\n  const lastScrollY = useRef(window.scrollY);\n  const scrollVelocity = useRef(0);\n  const targetScrollVelocity = useRef(0);\n  const [hasError, setHasError] = useState(!webGLAvailable);\n  const [fontLoaded, setFontLoaded] = useState(false);\n\n  // Load font first\n  useEffect(() => {\n    fontLoader.load().then(() => {\n      setFontLoaded(true);\n    }).catch((err) => {\n      console.warn('Font loading failed:', err);\n      setFontLoaded(true); // Continue anyway with fallback font\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!containerRef.current || hasError || !fontLoaded) return;\n\n    try {\n      // Cleanup previous instance if it exists\n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n        rendererRef.current = null;\n      }\n\n      // Get initial dimensions\n      const initialWidth = containerRef.current.clientWidth || window.innerWidth;\n      const initialHeight = isHeader ? window.innerHeight : (containerRef.current.clientHeight || window.innerHeight);\n      \n      if (initialWidth === 0 || initialHeight === 0) {\n        console.error('Invalid container dimensions');\n        setHasError(true);\n        return;\n      }\n\n      // Setup Three.js scene\n      const scene = new THREE.Scene();\n      sceneRef.current = scene;\n\n      // Setup camera\n      const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 10);\n      camera.position.z = 1;\n      cameraRef.current = camera;\n\n      // Setup renderer with error handling\n      const renderer = new THREE.WebGLRenderer({ \n        antialias: true, \n        alpha: true,\n        powerPreference: 'default',\n        preserveDrawingBuffer: true\n      });\n\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n      renderer.setSize(initialWidth, initialHeight);\n      rendererRef.current = renderer;\n      \n      // Clear container\n      while (containerRef.current.firstChild) {\n        containerRef.current.removeChild(containerRef.current.firstChild);\n      }\n      containerRef.current.appendChild(renderer.domElement);\n\n      // Create text texture\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d', { alpha: true });\n      if (!ctx) {\n        setHasError(true);\n        return;\n      }\n\n      // Set canvas size based on container size\n      const containerAspect = initialWidth / initialHeight;\n      \n      // Use power-of-two dimensions for textures, ensuring minimum size\n      const minSize = 256;\n      const textureWidth = Math.max(minSize, Math.pow(2, Math.ceil(Math.log2(Math.min(2048, initialWidth)))));\n      const textureHeight = Math.max(minSize, Math.pow(2, Math.ceil(Math.log2(textureWidth / containerAspect))));\n      \n      canvas.width = textureWidth;\n      canvas.height = textureHeight;\n      \n      // Fill canvas with black background\n      ctx.fillStyle = '#000000';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      // Calculate and set font size\n      const fontSize = isHeader \n        ? Math.floor(canvas.height * 0.25)\n        : Math.floor(canvas.height * 0.8);\n      \n      ctx.font = `bold ${fontSize}px Creepster`;\n      ctx.fillStyle = '#ffffff';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      \n      // Measure and scale text if needed\n      const textMetrics = ctx.measureText(text);\n      const textWidth = textMetrics.width;\n      const maxWidth = canvas.width * 0.9;\n      \n      if (textWidth > maxWidth) {\n        const scale = maxWidth / textWidth;\n        ctx.font = `bold ${Math.floor(fontSize * scale)}px Creepster`;\n      }\n      \n      // Draw text\n      ctx.fillText(text, canvas.width / 2, canvas.height / 2);\n\n      // Create texture with proper settings\n      const texture = new THREE.Texture(canvas);\n      texture.needsUpdate = true;\n      texture.minFilter = THREE.LinearFilter;\n      texture.magFilter = THREE.LinearFilter;\n      texture.format = THREE.RGBAFormat;\n      texture.type = THREE.UnsignedByteType;\n\n      // Parse color properly\n      const color = new THREE.Color();\n      try {\n        const parsedColor = parseRGBA(fill);\n        color.setStyle(parsedColor);\n      } catch (e) {\n        console.warn('Color parsing failed, using default white');\n        color.setRGB(1, 1, 1);\n      }\n\n      // Create shader material\n      const material = new THREE.ShaderMaterial({\n        uniforms: {\n          time: { value: 0 },\n          distortionFactor: { value: 0 },\n          scrollVelocity: { value: 0 },\n          mousePos: { value: new THREE.Vector2(0.5, 0.5) },\n          color: { value: color },\n          textTexture: { value: texture }\n        },\n        vertexShader,\n        fragmentShader,\n        transparent: true\n      });\n      materialRef.current = material;\n\n      // Create mesh with proper aspect ratio\n      const geometry = new THREE.PlaneGeometry(2, 2 / containerAspect);\n      const mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n\n      let isAnimating = true;\n      let lastTime = performance.now();\n      let deltaTime = 0;\n      \n      const animate = () => {\n        if (!isAnimating || !material || !renderer || !scene || !camera) return;\n\n        const currentTime = performance.now();\n        deltaTime = (currentTime - lastTime) / 1000; // Convert to seconds\n        lastTime = currentTime;\n\n        // Smooth out scroll velocity\n        scrollVelocity.current = lerp(\n          scrollVelocity.current,\n          targetScrollVelocity.current,\n          Math.min(1, deltaTime * 8) // Adjust this value to control smoothness\n        );\n\n        material.uniforms.time.value += deltaTime;\n        material.uniforms.mousePos.value.set(mousePos.current.x, mousePos.current.y);\n        material.uniforms.scrollVelocity.value = scrollVelocity.current;\n        \n        // Natural velocity decay\n        targetScrollVelocity.current *= Math.pow(0.95, deltaTime * 60);\n        \n        renderer.render(scene, camera);\n        frameRef.current = requestAnimationFrame(animate);\n      };\n\n      frameRef.current = requestAnimationFrame(animate);\n\n      // Handle mouse movement\n      const handleMouseMove = (e: MouseEvent) => {\n        const rect = containerRef.current?.getBoundingClientRect();\n        if (!rect) return;\n\n        mousePos.current = {\n          x: (e.clientX - rect.left) / rect.width,\n          y: 1 - (e.clientY - rect.top) / rect.height\n        };\n\n        if (materialRef.current) {\n          const dist = Math.hypot(\n            mousePos.current.x - 0.5,\n            mousePos.current.y - 0.5\n          );\n          // Increase maximum distortion for more intense effect\n          materialRef.current.uniforms.distortionFactor.value = Math.min(dist * 4, 2.0);\n        }\n      };\n\n      window.addEventListener('mousemove', handleMouseMove);\n\n      // Handle resize\n      const handleResize = () => {\n        if (!containerRef.current || !renderer || !camera) return;\n        \n        const newWidth = containerRef.current.clientWidth;\n        const newHeight = isHeader ? window.innerHeight : containerRef.current.clientHeight;\n        const newAspect = newWidth / newHeight;\n        \n        renderer.setSize(newWidth, newHeight);\n        \n        camera.left = -1;\n        camera.right = 1;\n        camera.top = 1 / newAspect;\n        camera.bottom = -1 / newAspect;\n        camera.updateProjectionMatrix();\n      };\n\n      window.addEventListener('resize', handleResize);\n      handleResize();\n\n      // Improved scroll handler with better velocity calculation\n      let lastScrollTime = performance.now();\n      let lastScrollDelta = 0;\n      \n      const handleScroll = () => {\n        const currentScrollY = window.scrollY;\n        const currentTime = performance.now();\n        const timeDelta = (currentTime - lastScrollTime) / 1000; // Convert to seconds\n        const scrollDelta = currentScrollY - lastScrollY.current;\n        \n        if (timeDelta > 0) {\n          // Calculate instantaneous velocity\n          const instantVelocity = scrollDelta / timeDelta / window.innerHeight;\n          \n          // Smooth out sudden changes in velocity\n          const smoothedVelocity = lerp(lastScrollDelta / timeDelta / window.innerHeight, instantVelocity, 0.5);\n          \n          // Update target velocity with clamping\n          targetScrollVelocity.current = Math.max(-4, Math.min(4, smoothedVelocity * 2));\n          \n          lastScrollDelta = scrollDelta;\n          lastScrollTime = currentTime;\n        }\n        \n        lastScrollY.current = currentScrollY;\n      };\n\n      // Add scroll listener\n      window.addEventListener('scroll', handleScroll, { passive: true });\n\n      // Handle WebGL context loss\n      const handleContextLost = () => {\n        isAnimating = false;\n        setHasError(true);\n      };\n\n      const handleContextRestored = () => {\n        isAnimating = true;\n        setHasError(false);\n      };\n\n      renderer.domElement.addEventListener('webglcontextlost', handleContextLost);\n      renderer.domElement.addEventListener('webglcontextrestored', handleContextRestored);\n\n      return () => {\n        isAnimating = false;\n        if (frameRef.current) {\n          cancelAnimationFrame(frameRef.current);\n        }\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('resize', handleResize);\n        window.removeEventListener('scroll', handleScroll);\n        renderer.domElement.removeEventListener('webglcontextlost', handleContextLost);\n        renderer.domElement.removeEventListener('webglcontextrestored', handleContextRestored);\n        renderer.dispose();\n        geometry.dispose();\n        material.dispose();\n        texture.dispose();\n      };\n    } catch (e) {\n      console.error('Setup error:', e);\n      setHasError(true);\n    }\n  }, [text, size, fill, isHeader, hasError, fontLoaded]);\n\n  if (!fontLoaded || hasError) {\n    return (\n      <FallbackText \n        $isHeader={isHeader} \n        className={className}\n        color={fill}\n      >\n        {text}\n      </FallbackText>\n    );\n  }\n\n  return <TextContainer ref={containerRef} className={className} $isHeader={isHeader} />;\n}; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,gBAAgB,MAAM,kBAAkB;;AAE/C;AACA;AACA;AACA;AACA;AACA;AALA,SAAAC,MAAA,IAAAC,OAAA;AAMA,MAAMC,aAAa,GAAGL,MAAM,CAACM,GAA4B;AACzD;AACA,YAAYC,KAAK,IAAIA,KAAK,CAACC,SAAS,GAAG,OAAO,GAAG,MAAM;AACvD;AACA;AACA;AACA;AACA;AACA,cAAcD,KAAK,IAAIA,KAAK,CAACC,SAAS,GAAG,OAAO,GAAG,MAAM;AACzD;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AAHAC,EAAA,GAbMJ,aAAa;AAiBnB,MAAMK,YAAY,GAAGV,MAAM,CAACM,GAA4B;AACxD;AACA,YAAYC,KAAK,IAAIA,KAAK,CAACC,SAAS,GAAG,OAAO,GAAG,MAAM;AACvD;AACA;AACA;AACA;AACA,eAAeD,KAAK,IAAIA,KAAK,CAACC,SAAS,GAAG,MAAM,GAAG,MAAM;AACzD,WAAWD,KAAK,IAAIA,KAAK,CAACI,KAAK,IAAI,MAAM;AACzC,CAAC;AAACC,GAAA,GATIF,YAAY;AAmBlB;AACA;AACA;AACA;AACA;AACA,MAAMG,YAAY,GAAG;AACrB;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,CAAC,MAAM;EA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}