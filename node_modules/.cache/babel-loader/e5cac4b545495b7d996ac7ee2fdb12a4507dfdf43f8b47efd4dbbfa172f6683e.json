{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/PortalBackground.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackgroundContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 0;\n  pointer-events: none;\n`;\n_c = BackgroundContainer;\nconst vertexShader = `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = vec4(position, 1.0);\n  }\n`;\nconst fragmentShader = `\n  uniform float time;\n  uniform vec2 resolution;\n  uniform vec2 mousePos;\n  uniform vec2 mouseVelocity;\n  varying vec2 vUv;\n\n  const float REYNOLDS_NUMBER = 1000.0;\n  const float VORTICITY = 0.1;\n  const float FLUID_SPEED = 0.5;\n  const int NUM_ITERATIONS = 12;\n\n  // Noise functions for fluid turbulence\n  vec2 hash(vec2 p) {\n    p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n  }\n\n  float noise(vec2 p) {\n    const float K1 = 0.366025404;\n    const float K2 = 0.211324865;\n    vec2 i = floor(p + (p.x+p.y)*K1);\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0*K2;\n    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c)), 0.0);\n    vec3 n = h*h*h*h*vec3(dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot(n, vec3(70.0));\n  }\n\n  // Vortex shedding simulation\n  vec2 vorticityForce(vec2 pos, vec2 mouseP) {\n    vec2 diff = pos - mouseP;\n    float dist = length(diff);\n    float strength = exp(-dist * 2.0);\n    vec2 force = vec2(diff.y, -diff.x) * strength * VORTICITY;\n    return force;\n  }\n\n  // Fluid dynamics\n  vec2 fluidFlow(vec2 pos) {\n    vec2 flow = vec2(0.0);\n    \n    // Base flow\n    flow.x += FLUID_SPEED;\n    \n    // Add vorticity from mouse position\n    flow += vorticityForce(pos, mousePos);\n    \n    // Add turbulence\n    for(int i = 1; i <= NUM_ITERATIONS; i++) {\n      float scale = float(i) * 0.5;\n      flow += vec2(\n        noise(pos * scale + time * 0.2),\n        noise(pos * scale + vec2(123.45, 678.90) + time * 0.2)\n      ) * (1.0 / float(i));\n    }\n    \n    return flow;\n}\n\n  void main() {\n    vec2 uv = vUv;\n    vec2 pos = uv * 2.0 - 1.0;\n    pos.x *= resolution.x / resolution.y;\n\n    // Calculate fluid dynamics\n    vec2 flow = fluidFlow(pos);\n    \n    // Calculate distance from mouse for red color intensity\n    float mouseDist = length(pos - mousePos);\n    float redIntensity = exp(-mouseDist * 4.0);\n    \n    // Calculate vortex color\n    vec3 baseColor = vec3(0.2, 0.0, 0.3); // Dark purple base\n    vec3 vortexColor = mix(\n      baseColor,\n      vec3(0.8, 0.0, 0.0), // Bright red\n      redIntensity * (0.5 + 0.5 * sin(length(flow) * 10.0 - time * 2.0))\n    );\n    \n    // Add flow-based distortion\n    float distortion = length(flow) * 0.5;\n    vortexColor += vec3(distortion * 0.2);\n    \n    // Add stars\n    float starNoise = noise(pos * 50.0 + time * 0.1);\n    float stars = smoothstep(0.8, 0.9, starNoise);\n    vortexColor = mix(vortexColor, vec3(1.0), stars * 0.5);\n\n    gl_FragColor = vec4(vortexColor, 1.0);\n  }\n`;\nexport const PortalBackground = () => {\n  _s();\n  const containerRef = useRef(null);\n  const rendererRef = useRef(null);\n  const frameRef = useRef(0);\n  const timeRef = useRef(0);\n  const lastTimeRef = useRef(0);\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const scene = new THREE.Scene();\n    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\n    // Optimize renderer\n    const renderer = new THREE.WebGLRenderer({\n      antialias: false,\n      powerPreference: 'high-performance',\n      stencil: false,\n      depth: false,\n      alpha: true,\n      precision: 'mediump'\n    });\n    rendererRef.current = renderer;\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n    // Enable WebGL optimizations\n    const gl = renderer.getContext();\n    gl.getExtension('OES_standard_derivatives');\n\n    // Disable depth and blend operations for 2D rendering\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n    containerRef.current.appendChild(renderer.domElement);\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: {\n          value: 0\n        },\n        resolution: {\n          value: new THREE.Vector2(window.innerWidth, window.innerHeight)\n        },\n        mousePos: {\n          value: new THREE.Vector2(0.5, 0.5)\n        },\n        mouseVelocity: {\n          value: new THREE.Vector2(0.0, 0.0)\n        }\n      },\n      vertexShader,\n      fragmentShader,\n      transparent: false,\n      depthWrite: false,\n      depthTest: false\n    });\n\n    // Use simpler geometry with minimal segments\n    const geometry = new THREE.PlaneGeometry(2, 2, 1, 1);\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    // Add mouse tracking\n    const lastMousePos = {\n      x: 0,\n      y: 0\n    };\n    const mouseVelocity = {\n      x: 0,\n      y: 0\n    };\n    const handleMouseMove = e => {\n      var _containerRef$current;\n      const rect = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.getBoundingClientRect();\n      if (!rect) return;\n\n      // Calculate normalized mouse position\n      const x = (e.clientX - rect.left) / rect.width;\n      const y = 1.0 - (e.clientY - rect.top) / rect.height;\n\n      // Calculate mouse velocity\n      mouseVelocity.x = x - lastMousePos.x;\n      mouseVelocity.y = y - lastMousePos.y;\n\n      // Update last position\n      lastMousePos.x = x;\n      lastMousePos.y = y;\n      if (material) {\n        material.uniforms.mousePos.value.set(x * 2 - 1, y * 2 - 1);\n        material.uniforms.mouseVelocity.value.set(mouseVelocity.x, mouseVelocity.y);\n      }\n    };\n\n    // Optimized animation loop with delta time\n    const animate = timestamp => {\n      if (!material || !renderer) return;\n\n      // Calculate smooth delta time\n      const deltaTime = timestamp - lastTimeRef.current;\n      lastTimeRef.current = timestamp;\n\n      // Update time at a consistent rate, capped at 60fps\n      const targetFrameTime = 1000 / 60;\n      const frameProgress = Math.min(deltaTime / targetFrameTime, 1);\n      timeRef.current += 0.001 * frameProgress; // Slower time progression\n\n      material.uniforms.time.value = timeRef.current;\n      renderer.render(scene, camera);\n      frameRef.current = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    lastTimeRef.current = performance.now();\n    frameRef.current = requestAnimationFrame(animate);\n\n    // Optimized resize handler with debounce\n    let resizeTimeout;\n    let lastWidth = window.innerWidth;\n    let lastHeight = window.innerHeight;\n    const handleResize = () => {\n      if (resizeTimeout) {\n        cancelAnimationFrame(resizeTimeout);\n      }\n      resizeTimeout = requestAnimationFrame(() => {\n        if (!renderer || !material) return;\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n\n        // Only resize if dimensions actually changed\n        if (width !== lastWidth || height !== lastHeight) {\n          renderer.setSize(width, height);\n          material.uniforms.resolution.value.set(width, height);\n          lastWidth = width;\n          lastHeight = height;\n        }\n      });\n    };\n\n    // Add event listeners\n    window.addEventListener('resize', handleResize, {\n      passive: true\n    });\n    window.addEventListener('mousemove', handleMouseMove, {\n      passive: true\n    });\n\n    // Cleanup\n    return () => {\n      var _containerRef$current2;\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current);\n      }\n      if (resizeTimeout) {\n        cancelAnimationFrame(resizeTimeout);\n      }\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      geometry.dispose();\n      material.dispose();\n      if ((_containerRef$current2 = containerRef.current) !== null && _containerRef$current2 !== void 0 && _containerRef$current2.contains(renderer.domElement)) {\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      rendererRef.current = null;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BackgroundContainer, {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 10\n  }, this);\n};\n_s(PortalBackground, \"1JOejoSc9jTfDIo82gIJ18hwByg=\");\n_c2 = PortalBackground;\nvar _c, _c2;\n$RefreshReg$(_c, \"BackgroundContainer\");\n$RefreshReg$(_c2, \"PortalBackground\");","map":{"version":3,"names":["React","useEffect","useRef","styled","THREE","jsxDEV","_jsxDEV","BackgroundContainer","div","_c","vertexShader","fragmentShader","PortalBackground","_s","containerRef","rendererRef","frameRef","timeRef","lastTimeRef","current","scene","Scene","camera","OrthographicCamera","renderer","WebGLRenderer","antialias","powerPreference","stencil","depth","alpha","precision","setSize","window","innerWidth","innerHeight","setPixelRatio","Math","min","devicePixelRatio","gl","getContext","getExtension","disable","DEPTH_TEST","BLEND","appendChild","domElement","material","ShaderMaterial","uniforms","time","value","resolution","Vector2","mousePos","mouseVelocity","transparent","depthWrite","depthTest","geometry","PlaneGeometry","mesh","Mesh","add","lastMousePos","x","y","handleMouseMove","e","_containerRef$current","rect","getBoundingClientRect","clientX","left","width","clientY","top","height","set","animate","timestamp","deltaTime","targetFrameTime","frameProgress","render","requestAnimationFrame","performance","now","resizeTimeout","lastWidth","lastHeight","handleResize","cancelAnimationFrame","addEventListener","passive","_containerRef$current2","removeEventListener","dispose","contains","removeChild","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/PortalBackground.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\n\nconst BackgroundContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 0;\n  pointer-events: none;\n`;\n\nconst vertexShader = `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = vec4(position, 1.0);\n  }\n`;\n\nconst fragmentShader = `\n  uniform float time;\n  uniform vec2 resolution;\n  uniform vec2 mousePos;\n  uniform vec2 mouseVelocity;\n  varying vec2 vUv;\n\n  const float REYNOLDS_NUMBER = 1000.0;\n  const float VORTICITY = 0.1;\n  const float FLUID_SPEED = 0.5;\n  const int NUM_ITERATIONS = 12;\n\n  // Noise functions for fluid turbulence\n  vec2 hash(vec2 p) {\n    p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n  }\n\n  float noise(vec2 p) {\n    const float K1 = 0.366025404;\n    const float K2 = 0.211324865;\n    vec2 i = floor(p + (p.x+p.y)*K1);\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0*K2;\n    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c)), 0.0);\n    vec3 n = h*h*h*h*vec3(dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot(n, vec3(70.0));\n  }\n\n  // Vortex shedding simulation\n  vec2 vorticityForce(vec2 pos, vec2 mouseP) {\n    vec2 diff = pos - mouseP;\n    float dist = length(diff);\n    float strength = exp(-dist * 2.0);\n    vec2 force = vec2(diff.y, -diff.x) * strength * VORTICITY;\n    return force;\n  }\n\n  // Fluid dynamics\n  vec2 fluidFlow(vec2 pos) {\n    vec2 flow = vec2(0.0);\n    \n    // Base flow\n    flow.x += FLUID_SPEED;\n    \n    // Add vorticity from mouse position\n    flow += vorticityForce(pos, mousePos);\n    \n    // Add turbulence\n    for(int i = 1; i <= NUM_ITERATIONS; i++) {\n      float scale = float(i) * 0.5;\n      flow += vec2(\n        noise(pos * scale + time * 0.2),\n        noise(pos * scale + vec2(123.45, 678.90) + time * 0.2)\n      ) * (1.0 / float(i));\n    }\n    \n    return flow;\n}\n\n  void main() {\n    vec2 uv = vUv;\n    vec2 pos = uv * 2.0 - 1.0;\n    pos.x *= resolution.x / resolution.y;\n\n    // Calculate fluid dynamics\n    vec2 flow = fluidFlow(pos);\n    \n    // Calculate distance from mouse for red color intensity\n    float mouseDist = length(pos - mousePos);\n    float redIntensity = exp(-mouseDist * 4.0);\n    \n    // Calculate vortex color\n    vec3 baseColor = vec3(0.2, 0.0, 0.3); // Dark purple base\n    vec3 vortexColor = mix(\n      baseColor,\n      vec3(0.8, 0.0, 0.0), // Bright red\n      redIntensity * (0.5 + 0.5 * sin(length(flow) * 10.0 - time * 2.0))\n    );\n    \n    // Add flow-based distortion\n    float distortion = length(flow) * 0.5;\n    vortexColor += vec3(distortion * 0.2);\n    \n    // Add stars\n    float starNoise = noise(pos * 50.0 + time * 0.1);\n    float stars = smoothstep(0.8, 0.9, starNoise);\n    vortexColor = mix(vortexColor, vec3(1.0), stars * 0.5);\n\n    gl_FragColor = vec4(vortexColor, 1.0);\n  }\n`;\n\nexport const PortalBackground: React.FC = () => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const frameRef = useRef<number>(0);\n  const timeRef = useRef<number>(0);\n  const lastTimeRef = useRef<number>(0);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\n    // Optimize renderer\n    const renderer = new THREE.WebGLRenderer({ \n      antialias: false,\n      powerPreference: 'high-performance',\n      stencil: false,\n      depth: false,\n      alpha: true,\n      precision: 'mediump'\n    });\n    \n    rendererRef.current = renderer;\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    \n    // Enable WebGL optimizations\n    const gl = renderer.getContext();\n    gl.getExtension('OES_standard_derivatives');\n    \n    // Disable depth and blend operations for 2D rendering\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n\n    containerRef.current.appendChild(renderer.domElement);\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: { value: 0 },\n        resolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },\n        mousePos: { value: new THREE.Vector2(0.5, 0.5) },\n        mouseVelocity: { value: new THREE.Vector2(0.0, 0.0) }\n      },\n      vertexShader,\n      fragmentShader,\n      transparent: false,\n      depthWrite: false,\n      depthTest: false\n    });\n\n    // Use simpler geometry with minimal segments\n    const geometry = new THREE.PlaneGeometry(2, 2, 1, 1);\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    // Add mouse tracking\n    const lastMousePos = { x: 0, y: 0 };\n    const mouseVelocity = { x: 0, y: 0 };\n    const handleMouseMove = (e: MouseEvent) => {\n      const rect = containerRef.current?.getBoundingClientRect();\n      if (!rect) return;\n\n      // Calculate normalized mouse position\n      const x = (e.clientX - rect.left) / rect.width;\n      const y = 1.0 - (e.clientY - rect.top) / rect.height;\n\n      // Calculate mouse velocity\n      mouseVelocity.x = x - lastMousePos.x;\n      mouseVelocity.y = y - lastMousePos.y;\n      \n      // Update last position\n      lastMousePos.x = x;\n      lastMousePos.y = y;\n\n      if (material) {\n        material.uniforms.mousePos.value.set(x * 2 - 1, y * 2 - 1);\n        material.uniforms.mouseVelocity.value.set(mouseVelocity.x, mouseVelocity.y);\n      }\n    };\n\n    // Optimized animation loop with delta time\n    const animate = (timestamp: number) => {\n      if (!material || !renderer) return;\n\n      // Calculate smooth delta time\n      const deltaTime = timestamp - lastTimeRef.current;\n      lastTimeRef.current = timestamp;\n      \n      // Update time at a consistent rate, capped at 60fps\n      const targetFrameTime = 1000 / 60;\n      const frameProgress = Math.min(deltaTime / targetFrameTime, 1);\n      timeRef.current += 0.001 * frameProgress; // Slower time progression\n      \n      material.uniforms.time.value = timeRef.current;\n\n      renderer.render(scene, camera);\n      frameRef.current = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    lastTimeRef.current = performance.now();\n    frameRef.current = requestAnimationFrame(animate);\n\n    // Optimized resize handler with debounce\n    let resizeTimeout: number;\n    let lastWidth = window.innerWidth;\n    let lastHeight = window.innerHeight;\n    \n    const handleResize = () => {\n      if (resizeTimeout) {\n        cancelAnimationFrame(resizeTimeout);\n      }\n      \n      resizeTimeout = requestAnimationFrame(() => {\n        if (!renderer || !material) return;\n        \n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        \n        // Only resize if dimensions actually changed\n        if (width !== lastWidth || height !== lastHeight) {\n          renderer.setSize(width, height);\n          material.uniforms.resolution.value.set(width, height);\n          lastWidth = width;\n          lastHeight = height;\n        }\n      });\n    };\n\n    // Add event listeners\n    window.addEventListener('resize', handleResize, { passive: true });\n    window.addEventListener('mousemove', handleMouseMove, { passive: true });\n\n    // Cleanup\n    return () => {\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current);\n      }\n      if (resizeTimeout) {\n        cancelAnimationFrame(resizeTimeout);\n      }\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      \n      renderer.dispose();\n      geometry.dispose();\n      material.dispose();\n      \n      if (containerRef.current?.contains(renderer.domElement)) {\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      \n      rendererRef.current = null;\n    };\n  }, []);\n\n  return <BackgroundContainer ref={containerRef} />;\n}; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,mBAAmB,GAAGJ,MAAM,CAACK,GAAG;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GARIF,mBAAmB;AAUzB,MAAMG,YAAY,GAAG;AACrB;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,cAAc,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMC,gBAA0B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9C,MAAMC,YAAY,GAAGZ,MAAM,CAAiB,IAAI,CAAC;EACjD,MAAMa,WAAW,GAAGb,MAAM,CAA6B,IAAI,CAAC;EAC5D,MAAMc,QAAQ,GAAGd,MAAM,CAAS,CAAC,CAAC;EAClC,MAAMe,OAAO,GAAGf,MAAM,CAAS,CAAC,CAAC;EACjC,MAAMgB,WAAW,GAAGhB,MAAM,CAAS,CAAC,CAAC;EAErCD,SAAS,CAAC,MAAM;IACd,IAAI,CAACa,YAAY,CAACK,OAAO,EAAE;IAE3B,MAAMC,KAAK,GAAG,IAAIhB,KAAK,CAACiB,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}