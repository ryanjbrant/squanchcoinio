{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/PortalBackground.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackgroundContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: -1;\n  canvas {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n  }\n`;\n_c = BackgroundContainer;\nconst portalVertexShader = `\n  varying vec2 vUv;\n  varying vec3 vPosition;\n  \n  void main() {\n    vUv = uv;\n    vPosition = position;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\nconst portalFragmentShader = `\n  uniform float time;\n  varying vec2 vUv;\n  varying vec3 vPosition;\n\n  // Noise functions\n  vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n  vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n  vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n  float snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i);\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n      + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n  }\n\n  float fbm(vec2 p) {\n    float sum = 0.0;\n    float amp = 1.0;\n    float freq = 1.0;\n    // More octaves for more detail\n    for(int i = 0; i < 6; i++) {\n      sum += amp * snoise(p * freq);\n      freq *= 2.0;\n      amp *= 0.5;\n      p = p * 1.1 + vec2(1.0);\n    }\n    return sum;\n  }\n\n  void main() {\n    vec2 center = vec2(0.5, 0.5);\n    vec2 p = vUv - center;\n    float r = length(p);\n    float angle = atan(p.y, p.x);\n\n    // Create spiral effect\n    float spiral = angle + 1.0/(r + 0.1);\n    spiral += time * 0.5; // Rotation speed\n\n    // Create multiple layers of noise\n    float noise1 = fbm(vec2(r * 3.0 - time * 0.2, spiral * 2.0));\n    float noise2 = fbm(vec2(r * 2.0 - time * 0.1, spiral * 1.5));\n    float noise3 = fbm(vec2(r * 4.0 - time * 0.3, spiral * 2.5));\n\n    // Create the black hole void\n    float voidRadius = 0.15; // Size of the black center\n    float voidEdge = smoothstep(voidRadius - 0.1, voidRadius + 0.1, r);\n    \n    // Create swirling energy effect\n    float energy = sin(spiral * 8.0 + noise1 * 5.0) * 0.5 + 0.5;\n    energy *= smoothstep(0.0, 0.2, r); // Fade in from center\n    energy *= smoothstep(1.0, 0.4, r); // Fade out at edges\n    \n    // Color palette\n    vec3 darkVoid = vec3(0.0, 0.0, 0.0);\n    vec3 energyColor1 = vec3(0.6, 0.0, 1.0); // Purple\n    vec3 energyColor2 = vec3(1.0, 0.0, 0.5); // Pink\n    vec3 energyColor3 = vec3(0.0, 0.2, 1.0); // Blue\n\n    // Mix colors based on noise and energy\n    vec3 finalColor = darkVoid;\n    \n    // Add swirling energy colors\n    float energyMix1 = energy * (noise1 * 0.5 + 0.5);\n    float energyMix2 = energy * (noise2 * 0.5 + 0.5);\n    float energyMix3 = energy * (noise3 * 0.5 + 0.5);\n    \n    finalColor = mix(finalColor, energyColor1, energyMix1 * voidEdge);\n    finalColor = mix(finalColor, energyColor2, energyMix2 * voidEdge * 0.7);\n    finalColor = mix(finalColor, energyColor3, energyMix3 * voidEdge * 0.5);\n\n    // Add intense glow around void\n    float voidGlow = smoothstep(voidRadius, voidRadius + 0.2, r) * \n                    smoothstep(voidRadius + 0.4, voidRadius, r);\n    finalColor += energyColor1 * voidGlow * 0.5;\n\n    // Add subtle outer glow\n    float outerGlow = smoothstep(1.0, 0.5, r);\n    finalColor += energyColor3 * outerGlow * 0.2;\n\n    // Darken center\n    float blackhole = smoothstep(voidRadius, 0.0, r);\n    finalColor = mix(finalColor, darkVoid, blackhole);\n\n    gl_FragColor = vec4(finalColor, 1.0);\n  }\n`;\nexport const PortalBackground = () => {\n  _s();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 10);\n    camera.position.z = 1;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    containerRef.current.appendChild(renderer.domElement);\n\n    // Create portal material\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: {\n          value: 0\n        }\n      },\n      vertexShader: portalVertexShader,\n      fragmentShader: portalFragmentShader\n    });\n\n    // Create full-screen quad\n    const geometry = new THREE.PlaneGeometry(2, 2);\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    // Animation loop\n    const animate = () => {\n      material.uniforms.time.value += 0.01;\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      var _containerRef$current;\n      window.removeEventListener('resize', handleResize);\n      renderer.dispose();\n      geometry.dispose();\n      material.dispose();\n      if ((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(renderer.domElement)) {\n        containerRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BackgroundContainer, {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 10\n  }, this);\n};\n_s(PortalBackground, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c2 = PortalBackground;\nvar _c, _c2;\n$RefreshReg$(_c, \"BackgroundContainer\");\n$RefreshReg$(_c2, \"PortalBackground\");","map":{"version":3,"names":["React","useEffect","useRef","styled","THREE","jsxDEV","_jsxDEV","BackgroundContainer","div","_c","portalVertexShader","portalFragmentShader","PortalBackground","_s","containerRef","current","scene","Scene","camera","OrthographicCamera","position","z","renderer","WebGLRenderer","antialias","setSize","window","innerWidth","innerHeight","setPixelRatio","Math","min","devicePixelRatio","appendChild","domElement","material","ShaderMaterial","uniforms","time","value","vertexShader","fragmentShader","geometry","PlaneGeometry","mesh","Mesh","add","animate","render","requestAnimationFrame","handleResize","addEventListener","_containerRef$current","removeEventListener","dispose","contains","removeChild","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/PortalBackground.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\n\nconst BackgroundContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: -1;\n  canvas {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n  }\n`;\n\nconst portalVertexShader = `\n  varying vec2 vUv;\n  varying vec3 vPosition;\n  \n  void main() {\n    vUv = uv;\n    vPosition = position;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`;\n\nconst portalFragmentShader = `\n  uniform float time;\n  varying vec2 vUv;\n  varying vec3 vPosition;\n\n  // Noise functions\n  vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n  vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n  vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n  float snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i);\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n      + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n  }\n\n  float fbm(vec2 p) {\n    float sum = 0.0;\n    float amp = 1.0;\n    float freq = 1.0;\n    // More octaves for more detail\n    for(int i = 0; i < 6; i++) {\n      sum += amp * snoise(p * freq);\n      freq *= 2.0;\n      amp *= 0.5;\n      p = p * 1.1 + vec2(1.0);\n    }\n    return sum;\n  }\n\n  void main() {\n    vec2 center = vec2(0.5, 0.5);\n    vec2 p = vUv - center;\n    float r = length(p);\n    float angle = atan(p.y, p.x);\n\n    // Create spiral effect\n    float spiral = angle + 1.0/(r + 0.1);\n    spiral += time * 0.5; // Rotation speed\n\n    // Create multiple layers of noise\n    float noise1 = fbm(vec2(r * 3.0 - time * 0.2, spiral * 2.0));\n    float noise2 = fbm(vec2(r * 2.0 - time * 0.1, spiral * 1.5));\n    float noise3 = fbm(vec2(r * 4.0 - time * 0.3, spiral * 2.5));\n\n    // Create the black hole void\n    float voidRadius = 0.15; // Size of the black center\n    float voidEdge = smoothstep(voidRadius - 0.1, voidRadius + 0.1, r);\n    \n    // Create swirling energy effect\n    float energy = sin(spiral * 8.0 + noise1 * 5.0) * 0.5 + 0.5;\n    energy *= smoothstep(0.0, 0.2, r); // Fade in from center\n    energy *= smoothstep(1.0, 0.4, r); // Fade out at edges\n    \n    // Color palette\n    vec3 darkVoid = vec3(0.0, 0.0, 0.0);\n    vec3 energyColor1 = vec3(0.6, 0.0, 1.0); // Purple\n    vec3 energyColor2 = vec3(1.0, 0.0, 0.5); // Pink\n    vec3 energyColor3 = vec3(0.0, 0.2, 1.0); // Blue\n\n    // Mix colors based on noise and energy\n    vec3 finalColor = darkVoid;\n    \n    // Add swirling energy colors\n    float energyMix1 = energy * (noise1 * 0.5 + 0.5);\n    float energyMix2 = energy * (noise2 * 0.5 + 0.5);\n    float energyMix3 = energy * (noise3 * 0.5 + 0.5);\n    \n    finalColor = mix(finalColor, energyColor1, energyMix1 * voidEdge);\n    finalColor = mix(finalColor, energyColor2, energyMix2 * voidEdge * 0.7);\n    finalColor = mix(finalColor, energyColor3, energyMix3 * voidEdge * 0.5);\n\n    // Add intense glow around void\n    float voidGlow = smoothstep(voidRadius, voidRadius + 0.2, r) * \n                    smoothstep(voidRadius + 0.4, voidRadius, r);\n    finalColor += energyColor1 * voidGlow * 0.5;\n\n    // Add subtle outer glow\n    float outerGlow = smoothstep(1.0, 0.5, r);\n    finalColor += energyColor3 * outerGlow * 0.2;\n\n    // Darken center\n    float blackhole = smoothstep(voidRadius, 0.0, r);\n    finalColor = mix(finalColor, darkVoid, blackhole);\n\n    gl_FragColor = vec4(finalColor, 1.0);\n  }\n`;\n\nexport const PortalBackground: React.FC = () => {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 10);\n    camera.position.z = 1;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n    containerRef.current.appendChild(renderer.domElement);\n\n    // Create portal material\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: { value: 0 }\n      },\n      vertexShader: portalVertexShader,\n      fragmentShader: portalFragmentShader,\n    });\n\n    // Create full-screen quad\n    const geometry = new THREE.PlaneGeometry(2, 2);\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    // Animation loop\n    const animate = () => {\n      material.uniforms.time.value += 0.01;\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      renderer.dispose();\n      geometry.dispose();\n      material.dispose();\n      if (containerRef.current?.contains(renderer.domElement)) {\n        containerRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, []);\n\n  return <BackgroundContainer ref={containerRef} />;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}