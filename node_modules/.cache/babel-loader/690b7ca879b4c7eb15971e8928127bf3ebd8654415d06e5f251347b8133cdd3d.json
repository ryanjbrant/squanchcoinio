{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/PortalBackground.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PortalBackground = () => {\n  _s();\n  const containerRef = useRef(null);\n  const frameRef = useRef();\n  const timeRef = useRef(0);\n  const lastTimeRef = useRef(0);\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: false\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    container.appendChild(renderer.domElement);\n    const scene = new THREE.Scene();\n    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    const staticShader = {\n      uniforms: {\n        time: {\n          value: 0\n        },\n        resolution: {\n          value: new THREE.Vector2()\n        }\n      },\n      vertexShader: `\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform float time;\n        uniform vec2 resolution;\n        varying vec2 vUv;\n\n        float random(vec2 p) {\n          vec2 k1 = vec2(\n            23.14069263277926,\n            2.665144142690225\n          );\n          return fract(cos(dot(p, k1)) * 12345.6789);\n        }\n\n        // Improved noise function for sharper static\n        float staticNoise(vec2 uv, float t) {\n          vec2 noise = vec2(\n            random(uv + t * vec2(1.0, 1.0)),\n            random(uv + t * vec2(-1.0, -1.0))\n          );\n          return (noise.x + noise.y) * 0.65;\n        }\n\n        void main() {\n          vec2 uv = vUv;\n          \n          // Create much finer-grained noise\n          vec2 blockSize = vec2(1.0) / (resolution.xy * 0.3); // Reduced block size for sharper static\n          vec2 block = floor(uv / blockSize);\n          \n          // Layer multiple noise patterns for more detail\n          float noise1 = staticNoise(block * 1.0, time * 15.0);\n          float noise2 = staticNoise(block * 2.0, time * 20.0) * 0.5;\n          float noise3 = staticNoise(block * 4.0, time * 25.0) * 0.25;\n          \n          float noise = (noise1 + noise2 + noise3) / 1.75; // Combine layers with normalization\n          \n          // Add sharp vertical distortion lines\n          float line = step(0.99, random(vec2(block.y * 2.0 + time * 8.0, time)));\n          noise = mix(noise, 1.0, line * 0.7);\n          \n          // Add thin horizontal interference bands\n          float band = step(0.995, random(vec2(time * 5.0, block.x * 3.0)));\n          noise = mix(noise, 0.1, band * 0.8);\n          \n          // Create thin scanlines\n          float scanline = sin(uv.y * 1200.0 + time * 15.0) * 0.5 + 0.5;\n          noise *= 0.95 + scanline * 0.05;\n          \n          // Create cold, monochromatic color palette\n          vec3 darkBlue = vec3(1.05, 0.05, 0.15);  // Dark blue-black\n          vec3 midGray = vec3(0.5, 0.5, 0.6);      // Cool gray\n          vec3 brightWhite = vec3(0.9, 0.9, 1.0);  // Slightly blue-tinted white\n          \n          // Mix colors based on noise value\n          vec3 color;\n          if (noise < 0.3) {\n            color = mix(darkBlue, midGray, noise * 3.33);\n          } else if (noise < 0.9) {\n            color = mix(midGray, brightWhite, (noise - 0.3) * 3.33);\n          } else {\n            color = brightWhite;\n          }\n          \n          // Add subtle color variation for more visual interest\n          float variation = random(block + time) * 0.1 - 0.05;\n          color += vec3(variation * 0.8, variation * 0.8, variation);\n          \n          gl_FragColor = vec4(color, 1.0);\n        }\n      `\n    };\n    const geometry = new THREE.PlaneGeometry(2, 2);\n    const material = new THREE.ShaderMaterial({\n      uniforms: staticShader.uniforms,\n      vertexShader: staticShader.vertexShader,\n      fragmentShader: staticShader.fragmentShader\n    });\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n    const handleResize = () => {\n      if (!containerRef.current) return;\n      const width = containerRef.current.clientWidth;\n      const height = containerRef.current.clientHeight;\n      renderer.setSize(width, height);\n      staticShader.uniforms.resolution.value.set(width, height);\n    };\n    const animate = time => {\n      const deltaTime = time - lastTimeRef.current;\n      lastTimeRef.current = time;\n      timeRef.current += deltaTime * 0.001;\n      staticShader.uniforms.time.value = timeRef.current;\n      renderer.render(scene, camera);\n      frameRef.current = requestAnimationFrame(animate);\n    };\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    frameRef.current = requestAnimationFrame(animate);\n    return () => {\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current);\n      }\n      window.removeEventListener('resize', handleResize);\n      container.removeChild(renderer.domElement);\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 10\n  }, this);\n};\n_s(PortalBackground, \"nycEaRBt/+4+aO5qMKsAkobVuhk=\");\n_c = PortalBackground;\nvar _c;\n$RefreshReg$(_c, \"PortalBackground\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","PortalBackground","_s","containerRef","frameRef","timeRef","lastTimeRef","current","container","renderer","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","clientWidth","clientHeight","appendChild","domElement","scene","Scene","camera","OrthographicCamera","staticShader","uniforms","time","value","resolution","Vector2","vertexShader","fragmentShader","geometry","PlaneGeometry","material","ShaderMaterial","mesh","Mesh","add","handleResize","width","height","set","animate","deltaTime","render","requestAnimationFrame","addEventListener","cancelAnimationFrame","removeEventListener","removeChild","dispose","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ryan/H3M Dropbox/Ryan Brant/repos/squanchcoin/src/components/PortalBackground.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nexport const PortalBackground: React.FC = () => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const frameRef = useRef<number>();\n  const timeRef = useRef<number>(0);\n  const lastTimeRef = useRef<number>(0);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    const renderer = new THREE.WebGLRenderer({ antialias: false });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    container.appendChild(renderer.domElement);\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\n    const staticShader = {\n      uniforms: {\n        time: { value: 0 },\n        resolution: { value: new THREE.Vector2() }\n      },\n      vertexShader: `\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform float time;\n        uniform vec2 resolution;\n        varying vec2 vUv;\n\n        float random(vec2 p) {\n          vec2 k1 = vec2(\n            23.14069263277926,\n            2.665144142690225\n          );\n          return fract(cos(dot(p, k1)) * 12345.6789);\n        }\n\n        // Improved noise function for sharper static\n        float staticNoise(vec2 uv, float t) {\n          vec2 noise = vec2(\n            random(uv + t * vec2(1.0, 1.0)),\n            random(uv + t * vec2(-1.0, -1.0))\n          );\n          return (noise.x + noise.y) * 0.65;\n        }\n\n        void main() {\n          vec2 uv = vUv;\n          \n          // Create much finer-grained noise\n          vec2 blockSize = vec2(1.0) / (resolution.xy * 0.3); // Reduced block size for sharper static\n          vec2 block = floor(uv / blockSize);\n          \n          // Layer multiple noise patterns for more detail\n          float noise1 = staticNoise(block * 1.0, time * 15.0);\n          float noise2 = staticNoise(block * 2.0, time * 20.0) * 0.5;\n          float noise3 = staticNoise(block * 4.0, time * 25.0) * 0.25;\n          \n          float noise = (noise1 + noise2 + noise3) / 1.75; // Combine layers with normalization\n          \n          // Add sharp vertical distortion lines\n          float line = step(0.99, random(vec2(block.y * 2.0 + time * 8.0, time)));\n          noise = mix(noise, 1.0, line * 0.7);\n          \n          // Add thin horizontal interference bands\n          float band = step(0.995, random(vec2(time * 5.0, block.x * 3.0)));\n          noise = mix(noise, 0.1, band * 0.8);\n          \n          // Create thin scanlines\n          float scanline = sin(uv.y * 1200.0 + time * 15.0) * 0.5 + 0.5;\n          noise *= 0.95 + scanline * 0.05;\n          \n          // Create cold, monochromatic color palette\n          vec3 darkBlue = vec3(1.05, 0.05, 0.15);  // Dark blue-black\n          vec3 midGray = vec3(0.5, 0.5, 0.6);      // Cool gray\n          vec3 brightWhite = vec3(0.9, 0.9, 1.0);  // Slightly blue-tinted white\n          \n          // Mix colors based on noise value\n          vec3 color;\n          if (noise < 0.3) {\n            color = mix(darkBlue, midGray, noise * 3.33);\n          } else if (noise < 0.9) {\n            color = mix(midGray, brightWhite, (noise - 0.3) * 3.33);\n          } else {\n            color = brightWhite;\n          }\n          \n          // Add subtle color variation for more visual interest\n          float variation = random(block + time) * 0.1 - 0.05;\n          color += vec3(variation * 0.8, variation * 0.8, variation);\n          \n          gl_FragColor = vec4(color, 1.0);\n        }\n      `\n    };\n\n    const geometry = new THREE.PlaneGeometry(2, 2);\n    const material = new THREE.ShaderMaterial({\n      uniforms: staticShader.uniforms,\n      vertexShader: staticShader.vertexShader,\n      fragmentShader: staticShader.fragmentShader\n    });\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    const handleResize = () => {\n      if (!containerRef.current) return;\n      const width = containerRef.current.clientWidth;\n      const height = containerRef.current.clientHeight;\n      renderer.setSize(width, height);\n      staticShader.uniforms.resolution.value.set(width, height);\n    };\n\n    const animate = (time: number) => {\n      const deltaTime = time - lastTimeRef.current;\n      lastTimeRef.current = time;\n      timeRef.current += deltaTime * 0.001;\n      \n      staticShader.uniforms.time.value = timeRef.current;\n      renderer.render(scene, camera);\n      frameRef.current = requestAnimationFrame(animate);\n    };\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    frameRef.current = requestAnimationFrame(animate);\n\n    return () => {\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current);\n      }\n      window.removeEventListener('resize', handleResize);\n      container.removeChild(renderer.domElement);\n      renderer.dispose();\n    };\n  }, []);\n\n  return <div ref={containerRef} style={{ width: '100%', height: '100%' }} />;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}